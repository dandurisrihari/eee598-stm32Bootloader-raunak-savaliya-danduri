
Custom_Bootloader_MSA_Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd8  08004dd8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004dd8  08004dd8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dd8  08004dd8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001e0  08004fc0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004fc0  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002410  00000000  00000000  0002bde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002eb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000210c7  00000000  00000000  0002f410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad80  00000000  00000000  000504d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2356  00000000  00000000  0005b257  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d5ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028cc  00000000  00000000  0011d628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a1c 	.word	0x08004a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08004a1c 	.word	0x08004a1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <erase_flash>:
/* pointer specifying the user app jump address*/
typedef void (*fnc_ptr)(void);

/* Write/Flash the memory and return the status after the flashing operation */
flash_status erase_flash(uint32_t addr)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  HAL_FLASH_Unlock();
 8000298:	f001 faa4 	bl	80017e4 <HAL_FLASH_Unlock>

  flash_status status_flash = FLASH_ERROR;
 800029c:	23ff      	movs	r3, #255	; 0xff
 800029e:	77fb      	strb	r3, [r7, #31]
  FLASH_EraseInitTypeDef init_erase;
  uint32_t error = 0u;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]

  init_erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  init_erase.PageAddress = addr;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	617b      	str	r3, [r7, #20]

  /* Specify the number of pages to erase */
  init_erase.NbPages = 10;
 80002ac:	230a      	movs	r3, #10
 80002ae:	61bb      	str	r3, [r7, #24]
  /* Erase the requested sector */
  if (HAL_OK == HAL_FLASHEx_Erase(&init_erase, &error))
 80002b0:	f107 020c 	add.w	r2, r7, #12
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	4611      	mov	r1, r2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fb56 	bl	800196c <HAL_FLASHEx_Erase>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <erase_flash+0x3a>
  {
    status_flash = FLASH_OK;
 80002c6:	2300      	movs	r3, #0
 80002c8:	77fb      	strb	r3, [r7, #31]
  }

  HAL_FLASH_Lock();
 80002ca:	f001 fab1 	bl	8001830 <HAL_FLASH_Lock>

  return status_flash;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3720      	adds	r7, #32
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <write_flash>:

/* Write/Flash the memory and return the status after the flashing operation */
flash_status write_flash(uint32_t addr, uint32_t *data, uint32_t len)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  flash_status status_flash = FLASH_OK;
 80002e4:	2300      	movs	r3, #0
 80002e6:	75fb      	strb	r3, [r7, #23]

  HAL_FLASH_Unlock();
 80002e8:	f001 fa7c 	bl	80017e4 <HAL_FLASH_Unlock>

  /* start the loop */
  for (uint32_t i = 0u; (i < len) && (FLASH_OK == status_flash); i++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
 80002f0:	e036      	b.n	8000360 <write_flash+0x88>
  {
	  /* report error if the specified address is greater than the end address of the flash */
    if (FLASH_APP_END_ADDRESS <= addr)
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <write_flash+0xa4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4613      	mov	r3, r2
 80002fa:	011b      	lsls	r3, r3, #4
 80002fc:	4413      	add	r3, r2
 80002fe:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	429a      	cmp	r2, r3
 8000306:	d304      	bcc.n	8000312 <write_flash+0x3a>
    {
      status_flash |= FLASH_ERROR_SIZE;
 8000308:	7dfb      	ldrb	r3, [r7, #23]
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	75fb      	strb	r3, [r7, #23]
 8000310:	e023      	b.n	800035a <write_flash+0x82>
    }
    else
    {
    	/* Start the flashing and report the status  */
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data[i]))
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	68ba      	ldr	r2, [r7, #8]
 8000318:	4413      	add	r3, r2
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f04f 0400 	mov.w	r4, #0
 8000320:	461a      	mov	r2, r3
 8000322:	4623      	mov	r3, r4
 8000324:	68f9      	ldr	r1, [r7, #12]
 8000326:	2002      	movs	r0, #2
 8000328:	f001 f9ec 	bl	8001704 <HAL_FLASH_Program>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d003      	beq.n	800033a <write_flash+0x62>
      {
        status_flash |= FLASH_ERROR_WRITE;
 8000332:	7dfb      	ldrb	r3, [r7, #23]
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	75fb      	strb	r3, [r7, #23]
      }
      /* check the contents of the memory, if wrong report an error */
      if (((data[i])) != (*(volatile uint32_t*)addr))
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	4413      	add	r3, r2
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	429a      	cmp	r2, r3
 800034a:	d003      	beq.n	8000354 <write_flash+0x7c>
      {
        status_flash |= FLASH_ERROR_READBACK;
 800034c:	7dfb      	ldrb	r3, [r7, #23]
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	75fb      	strb	r3, [r7, #23]
      }

      /* increase the address */
      addr += 4u;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3304      	adds	r3, #4
 8000358:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0u; (i < len) && (FLASH_OK == status_flash); i++)
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	3301      	adds	r3, #1
 800035e:	613b      	str	r3, [r7, #16]
 8000360:	693a      	ldr	r2, [r7, #16]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	d202      	bcs.n	800036e <write_flash+0x96>
 8000368:	7dfb      	ldrb	r3, [r7, #23]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0c1      	beq.n	80002f2 <write_flash+0x1a>
    }
  }

  HAL_FLASH_Lock();
 800036e:	f001 fa5f 	bl	8001830 <HAL_FLASH_Lock>

  return status_flash;
 8000372:	7dfb      	ldrb	r3, [r7, #23]
}
 8000374:	4618      	mov	r0, r3
 8000376:	371c      	adds	r7, #28
 8000378:	46bd      	mov	sp, r7
 800037a:	bd90      	pop	{r4, r7, pc}
 800037c:	200002b8 	.word	0x200002b8

08000380 <flash_jump_userapp>:

/* Jump to the user application  */
void flash_jump_userapp(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	/* define function pointer to store the address of the app's location */
  fnc_ptr jump_to_userapp;
  jump_to_userapp = (fnc_ptr)(*(volatile uint32_t*) (FLASH_APP_START_ADDRESS+4u));
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <flash_jump_userapp+0x34>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3304      	adds	r3, #4
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	607b      	str	r3, [r7, #4]
  HAL_DeInit();
 8000392:	f000 ff2b 	bl	80011ec <HAL_DeInit>
  /* Set the main stack pointer to point to the start of the app's address */
  __set_MSP(*(volatile uint32_t*)FLASH_APP_START_ADDRESS);
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <flash_jump_userapp+0x34>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f383 8808 	msr	MSP, r3
  jump_to_userapp(); /* jump to app  */
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200002b8 	.word	0x200002b8

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0c6      	sub	sp, #280	; 0x118
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003be:	f000 feff 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f8a7 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f987 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ca:	f000 f925 	bl	8000618 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80003ce:	f000 f901 	bl	80005d4 <MX_CRC_Init>
  MX_USART3_UART_Init();
 80003d2:	f000 f951 	bl	8000678 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Print the welcome message */
  uart_trnsmt_str((uint8_t*)"\n\r================================\n\r");
 80003d6:	4842      	ldr	r0, [pc, #264]	; (80004e0 <main+0x128>)
 80003d8:	f000 fc70 	bl	8000cbc <uart_trnsmt_str>
  uart_trnsmt_str((uint8_t*)"UART Bootloader\n\r");
 80003dc:	4841      	ldr	r0, [pc, #260]	; (80004e4 <main+0x12c>)
 80003de:	f000 fc6d 	bl	8000cbc <uart_trnsmt_str>
  uart_trnsmt_str((uint8_t*)"================================\n\r\n\r");
 80003e2:	4841      	ldr	r0, [pc, #260]	; (80004e8 <main+0x130>)
 80003e4:	f000 fc6a 	bl	8000cbc <uart_trnsmt_str>
  userAppAddr = (uint32_t *)FLASH_RECENT_APP_STORE;
 80003e8:	4b40      	ldr	r3, [pc, #256]	; (80004ec <main+0x134>)
 80003ea:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <main+0x138>)
 80003ec:	601a      	str	r2, [r3, #0]
  userAppCounter = (uint32_t *)FLASH_APPS_COUNTER_STORE;
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <main+0x13c>)
 80003f0:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <main+0x140>)
 80003f2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Lets check whether button is pressed or not, if not pressed jump to user application */
  while(1){
	  if ( HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET )
 80003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f8:	4840      	ldr	r0, [pc, #256]	; (80004fc <main+0x144>)
 80003fa:	f001 fce5 	bl	8001dc8 <HAL_GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <main+0x52>
	  {
		  bootloader_uart_read_data();
 8000404:	f000 f9d0 	bl	80007a8 <bootloader_uart_read_data>
 8000408:	e7f4      	b.n	80003f4 <main+0x3c>
	  }
	  else
	  {
		  if(*userAppAddr == 0xFFFFFFFF){
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <main+0x134>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000414:	d107      	bne.n	8000426 <main+0x6e>
			  uart_trnsmt_str((uint8_t*)"Flash is empty press Enter Button to go to Bootloader Mode...\n\r");
 8000416:	483a      	ldr	r0, [pc, #232]	; (8000500 <main+0x148>)
 8000418:	f000 fc50 	bl	8000cbc <uart_trnsmt_str>
			  Wait_For_EnterKey();
 800041c:	f000 fac0 	bl	80009a0 <Wait_For_EnterKey>
			  bootloader_uart_read_data();
 8000420:	f000 f9c2 	bl	80007a8 <bootloader_uart_read_data>
			  continue;
 8000424:	e05b      	b.n	80004de <main+0x126>
		  }
		  else{
			  uint8_t noOfApps = *userAppCounter;
 8000426:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <main+0x13c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			  printmsg("Total Apps Present %d\n\r",noOfApps+1);
 8000430:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000434:	3301      	adds	r3, #1
 8000436:	4619      	mov	r1, r3
 8000438:	4832      	ldr	r0, [pc, #200]	; (8000504 <main+0x14c>)
 800043a:	f000 facb 	bl	80009d4 <printmsg>
			  printmsg("Enter which app to run\n\r");
 800043e:	4832      	ldr	r0, [pc, #200]	; (8000508 <main+0x150>)
 8000440:	f000 fac8 	bl	80009d4 <printmsg>
			  char buff[256],recvd;
			  uint8_t count=0;
 8000444:	2300      	movs	r3, #0
 8000446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				for(int i=0;i<256;i++){
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000450:	e022      	b.n	8000498 <main+0xe0>
					HAL_UART_Receive(&huart3, (uint8_t *)&recvd,1, HAL_MAX_DELAY);
 8000452:	f207 1107 	addw	r1, r7, #263	; 0x107
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
 800045a:	2201      	movs	r2, #1
 800045c:	482b      	ldr	r0, [pc, #172]	; (800050c <main+0x154>)
 800045e:	f003 f92f 	bl	80036c0 <HAL_UART_Receive>
					if(recvd != '\r'){
 8000462:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000466:	2b0d      	cmp	r3, #13
 8000468:	d00b      	beq.n	8000482 <main+0xca>
						buff[count] = recvd;
 800046a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800046e:	f897 1107 	ldrb.w	r1, [r7, #263]	; 0x107
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	54d1      	strb	r1, [r2, r3]
						count++;
 8000476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800047a:	3301      	adds	r3, #1
 800047c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000480:	e005      	b.n	800048e <main+0xd6>
					}
					else{
						buff[count] = '\0';
 8000482:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000486:	1d3a      	adds	r2, r7, #4
 8000488:	2100      	movs	r1, #0
 800048a:	54d1      	strb	r1, [r2, r3]
						break;
 800048c:	e008      	b.n	80004a0 <main+0xe8>
				for(int i=0;i<256;i++){
 800048e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000492:	3301      	adds	r3, #1
 8000494:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800049c:	2bff      	cmp	r3, #255	; 0xff
 800049e:	ddd8      	ble.n	8000452 <main+0x9a>
					}
				}
				uint32_t option = (strtol(buff,'\0',0));
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fe78 	bl	800419c <strtol>
 80004ac:	4603      	mov	r3, r0
 80004ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				printmsg("Jumping to user application  %d..application %d is running.\n\r",option,option);
 80004b2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80004b6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80004ba:	4815      	ldr	r0, [pc, #84]	; (8000510 <main+0x158>)
 80004bc:	f000 fa8a 	bl	80009d4 <printmsg>
				userAppAddr = (uint32_t *)(FLASH_USER_APPS_ADDR_STORE - 0x800*(option-1));
 80004c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80004c4:	4613      	mov	r3, r2
 80004c6:	055b      	lsls	r3, r3, #21
 80004c8:	1a9b      	subs	r3, r3, r2
 80004ca:	02db      	lsls	r3, r3, #11
 80004cc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80004d0:	f503 23fd 	add.w	r3, r3, #518144	; 0x7e800
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <main+0x134>)
 80004d8:	601a      	str	r2, [r3, #0]
				flash_jump_userapp();
 80004da:	f7ff ff51 	bl	8000380 <flash_jump_userapp>
	  if ( HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET )
 80004de:	e789      	b.n	80003f4 <main+0x3c>
 80004e0:	08004a34 	.word	0x08004a34
 80004e4:	08004a5c 	.word	0x08004a5c
 80004e8:	08004a70 	.word	0x08004a70
 80004ec:	200002b8 	.word	0x200002b8
 80004f0:	0807f000 	.word	0x0807f000
 80004f4:	200002bc 	.word	0x200002bc
 80004f8:	0807f800 	.word	0x0807f800
 80004fc:	48000800 	.word	0x48000800
 8000500:	08004a98 	.word	0x08004a98
 8000504:	08004ad8 	.word	0x08004ad8
 8000508:	08004af0 	.word	0x08004af0
 800050c:	20000210 	.word	0x20000210
 8000510:	08004b0c 	.word	0x08004b0c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0a6      	sub	sp, #152	; 0x98
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fdb6 	bl	8004094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2258      	movs	r2, #88	; 0x58
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fda8 	bl	8004094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	2310      	movs	r3, #16
 800054e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800055c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000560:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fc58 	bl	8001e28 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800057e:	f000 fa51 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fb58 	bl	8002c54 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005aa:	f000 fa3b 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80005ae:	2306      	movs	r3, #6
 80005b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fd7f 	bl	80030c0 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005c8:	f000 fa2c 	bl	8000a24 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3798      	adds	r7, #152	; 0x98
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_CRC_Init+0x3c>)
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <MX_CRC_Init+0x40>)
 80005dc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_CRC_Init+0x3c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_CRC_Init+0x3c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_CRC_Init+0x3c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_CRC_Init+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_CRC_Init+0x3c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_CRC_Init+0x3c>)
 80005fe:	f000 ff51 	bl	80014a4 <HAL_CRC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000608:	f000 fa0c 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000294 	.word	0x20000294
 8000614:	40023000 	.word	0x40023000

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <MX_USART2_UART_Init+0x5c>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000624:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800065c:	f002 ff4e 	bl	80034fc <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 f9dd 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200002c0 	.word	0x200002c0
 8000674:	40004400 	.word	0x40004400

08000678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART3_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 8000684:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006bc:	f002 ff1e 	bl	80034fc <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f9ad 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000210 	.word	0x20000210
 80006d4:	40004800 	.word	0x40004800

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_GPIO_Init+0xc4>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a2a      	ldr	r2, [pc, #168]	; (800079c <MX_GPIO_Init+0xc4>)
 80006f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_GPIO_Init+0xc4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_GPIO_Init+0xc4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <MX_GPIO_Init+0xc4>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_GPIO_Init+0xc4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xc4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xc4>)
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xc4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0xc4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_GPIO_Init+0xc4>)
 800073c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0xc4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f001 fb4f 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_GPIO_Init+0xc8>)
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_GPIO_Init+0xcc>)
 8000770:	f001 f9a0 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f001 f991 	bl	8001ab4 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	10210000 	.word	0x10210000
 80007a4:	48000800 	.word	0x48000800

080007a8 <bootloader_uart_read_data>:

/* USER CODE BEGIN 4 */
void  bootloader_uart_read_data(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0c6      	sub	sp, #280	; 0x118
 80007ac:	af00      	add	r7, sp, #0
	char buff[256],recvd;
	uint8_t count=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	/* Ask for new data and start the Xmodem protocol. */
	uart_trnsmt_str((uint8_t*)"Please send a starting address to update the firmware.\n\r");
 80007b4:	4840      	ldr	r0, [pc, #256]	; (80008b8 <bootloader_uart_read_data+0x110>)
 80007b6:	f000 fa81 	bl	8000cbc <uart_trnsmt_str>

	for(int i=0;i<256;i++){
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80007c0:	e026      	b.n	8000810 <bootloader_uart_read_data+0x68>
		HAL_UART_Receive(&huart3, (uint8_t *)&recvd,1, HAL_MAX_DELAY);
 80007c2:	f107 010f 	add.w	r1, r7, #15
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	2201      	movs	r2, #1
 80007cc:	483b      	ldr	r0, [pc, #236]	; (80008bc <bootloader_uart_read_data+0x114>)
 80007ce:	f002 ff77 	bl	80036c0 <HAL_UART_Receive>
		if(recvd != '\r'){
 80007d2:	f107 030f 	add.w	r3, r7, #15
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b0d      	cmp	r3, #13
 80007da:	d00d      	beq.n	80007f8 <bootloader_uart_read_data+0x50>
			buff[count] = recvd;
 80007dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007e0:	f107 020f 	add.w	r2, r7, #15
 80007e4:	7811      	ldrb	r1, [r2, #0]
 80007e6:	f107 0210 	add.w	r2, r7, #16
 80007ea:	54d1      	strb	r1, [r2, r3]
			count++;
 80007ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007f0:	3301      	adds	r3, #1
 80007f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80007f6:	e006      	b.n	8000806 <bootloader_uart_read_data+0x5e>
		}
		else{
			buff[count] = '\0';
 80007f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80007fc:	f107 0210 	add.w	r2, r7, #16
 8000800:	2100      	movs	r1, #0
 8000802:	54d1      	strb	r1, [r2, r3]
			break;
 8000804:	e008      	b.n	8000818 <bootloader_uart_read_data+0x70>
	for(int i=0;i<256;i++){
 8000806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800080a:	3301      	adds	r3, #1
 800080c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000810:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000814:	2bff      	cmp	r3, #255	; 0xff
 8000816:	ddd4      	ble.n	80007c2 <bootloader_uart_read_data+0x1a>
		}
	}
	uint32_t tempAddrVal = (strtol(buff,'\0',0));
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fcbb 	bl	800419c <strtol>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	601a      	str	r2, [r3, #0]
	uint32_t AppBlock = *userAppCounter + 1;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <bootloader_uart_read_data+0x118>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	601a      	str	r2, [r3, #0]
	My_flash_erase((uint32_t)FLASH_APPS_COUNTER_STORE);
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <bootloader_uart_read_data+0x11c>)
 800083e:	f000 f88b 	bl	8000958 <My_flash_erase>
	My_flash_write((uint32_t)FLASH_APPS_COUNTER_STORE,&AppBlock,1);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	481e      	ldr	r0, [pc, #120]	; (80008c4 <bootloader_uart_read_data+0x11c>)
 800084a:	f000 f843 	bl	80008d4 <My_flash_write>

	My_flash_erase((uint32_t)FLASH_RECENT_APP_STORE);
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <bootloader_uart_read_data+0x120>)
 8000850:	f000 f882 	bl	8000958 <My_flash_erase>
	My_flash_write((uint32_t)FLASH_RECENT_APP_STORE,&tempAddrVal,1);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2201      	movs	r2, #1
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <bootloader_uart_read_data+0x120>)
 800085e:	f000 f839 	bl	80008d4 <My_flash_write>

	My_flash_erase((uint32_t)FLASH_USER_APPS_ADDR_STORE - 0x800*AppBlock);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	055b      	lsls	r3, r3, #21
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	02db      	lsls	r3, r3, #11
 800086e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000872:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f86e 	bl	8000958 <My_flash_erase>
	My_flash_write((uint32_t)(FLASH_USER_APPS_ADDR_STORE - 0x800*AppBlock),&tempAddrVal,1);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4613      	mov	r3, r2
 8000882:	055b      	lsls	r3, r3, #21
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	02db      	lsls	r3, r3, #11
 8000888:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800088c:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
 8000890:	f107 0108 	add.w	r1, r7, #8
 8000894:	2201      	movs	r2, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f81c 	bl	80008d4 <My_flash_write>

	/* Ask for new data and start the Xmodem protocol. */
	uart_trnsmt_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <bootloader_uart_read_data+0x124>)
 800089e:	f000 fa0d 	bl	8000cbc <uart_trnsmt_str>
	xmodem_rcv();
 80008a2:	f000 fa55 	bl	8000d50 <xmodem_rcv>
	/* We only exit the xmodem protocol, if there are any errors.
	 * In that case, notify the user and start over. */
	uart_trnsmt_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <bootloader_uart_read_data+0x128>)
 80008a8:	f000 fa08 	bl	8000cbc <uart_trnsmt_str>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
}
 80008ac:	bf00      	nop
 80008ae:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08004b4c 	.word	0x08004b4c
 80008bc:	20000210 	.word	0x20000210
 80008c0:	200002bc 	.word	0x200002bc
 80008c4:	0807f800 	.word	0x0807f800
 80008c8:	0807f000 	.word	0x0807f000
 80008cc:	08004b88 	.word	0x08004b88
 80008d0:	08004bd8 	.word	0x08004bd8

080008d4 <My_flash_write>:

/* USER CODE END 4 */
flash_status My_flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  flash_status status = FLASH_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	75fb      	strb	r3, [r7, #23]

  HAL_FLASH_Unlock();
 80008e4:	f000 ff7e 	bl	80017e4 <HAL_FLASH_Unlock>

  /* Loop through the array. */
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	e026      	b.n	800093c <My_flash_write+0x68>
  {
    /* If we reached the end of the memory, then report an error and don't do anything else.*/

      /* The actual flashing. If there is an error, then report it. */
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]))
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f04f 0400 	mov.w	r4, #0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4623      	mov	r3, r4
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	2002      	movs	r0, #2
 8000904:	f000 fefe 	bl	8001704 <HAL_FLASH_Program>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <My_flash_write+0x42>
      {
        status |= FLASH_ERROR_WRITE;
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	75fb      	strb	r3, [r7, #23]
      }
      /* Read back the content of the memory. If it is wrong, then report an error. */
      if (((data[i])) != (*(volatile uint32_t*)address))
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d003      	beq.n	8000930 <My_flash_write+0x5c>
      {
        status |= FLASH_ERROR_READBACK;
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	75fb      	strb	r3, [r7, #23]
      }

      /* Shift the address by a word. */
      address += 4u;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3304      	adds	r3, #4
 8000934:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3301      	adds	r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	d202      	bcs.n	800094a <My_flash_write+0x76>
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0d1      	beq.n	80008ee <My_flash_write+0x1a>

  }

  HAL_FLASH_Lock();
 800094a:	f000 ff71 	bl	8001830 <HAL_FLASH_Lock>

  return status;
 800094e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000950:	4618      	mov	r0, r3
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}

08000958 <My_flash_erase>:

flash_status  My_flash_erase(uint32_t address)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  HAL_FLASH_Unlock();
 8000960:	f000 ff40 	bl	80017e4 <HAL_FLASH_Unlock>

  flash_status status = FLASH_ERROR;
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	77fb      	strb	r3, [r7, #31]
  FLASH_EraseInitTypeDef erase_init;
  uint32_t error = 0u;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]

  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  erase_init.PageAddress = address;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	617b      	str	r3, [r7, #20]

  /* Calculate the number of pages from "address" and the end of flash. */
  erase_init.NbPages = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  /* Do the actual erasing. */
  if (HAL_OK == HAL_FLASHEx_Erase(&erase_init, &error))
 8000978:	f107 020c 	add.w	r2, r7, #12
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fff2 	bl	800196c <HAL_FLASHEx_Erase>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <My_flash_erase+0x3a>
  {
    status = FLASH_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	77fb      	strb	r3, [r7, #31]
  }

  HAL_FLASH_Lock();
 8000992:	f000 ff4d 	bl	8001830 <HAL_FLASH_Lock>

  return status;
 8000996:	7ffb      	ldrb	r3, [r7, #31]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <Wait_For_EnterKey>:

void Wait_For_EnterKey(void){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	uint8_t recvd;
	while(1){
		HAL_UART_Receive(&huart3, &recvd, 1, HAL_MAX_DELAY);
 80009a6:	1df9      	adds	r1, r7, #7
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2201      	movs	r2, #1
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <Wait_For_EnterKey+0x2c>)
 80009b0:	f002 fe86 	bl	80036c0 <HAL_UART_Receive>
		if(recvd == '\r')
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b0d      	cmp	r3, #13
 80009b8:	d003      	beq.n	80009c2 <Wait_For_EnterKey+0x22>
			break;
		else
			uart_trnsmt_str((uint8_t*)"Invalid input Press Enter to continue.\n\r");
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <Wait_For_EnterKey+0x30>)
 80009bc:	f000 f97e 	bl	8000cbc <uart_trnsmt_str>
		HAL_UART_Receive(&huart3, &recvd, 1, HAL_MAX_DELAY);
 80009c0:	e7f1      	b.n	80009a6 <Wait_For_EnterKey+0x6>
			break;
 80009c2:	bf00      	nop
	}
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000210 	.word	0x20000210
 80009d0:	08004bf8 	.word	0x08004bf8

080009d4 <printmsg>:
#ifdef BL_DEBUG_MSG_EN
/* prints formatted string to console over UART */
 void printmsg(char *format,...)
{
 80009d4:	b40f      	push	{r0, r1, r2, r3}
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b0c2      	sub	sp, #264	; 0x108
 80009da:	af00      	add	r7, sp, #0
	char str[256];
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80009dc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	601a      	str	r2, [r3, #0]
	vsprintf(str, format,args);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	f107 0008 	add.w	r0, r7, #8
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80009f0:	f003 fc00 	bl	80041f4 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbf1 	bl	80001e0 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f107 0108 	add.w	r1, r7, #8
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <printmsg+0x4c>)
 8000a0c:	f002 fdc4 	bl	8003598 <HAL_UART_Transmit>
	va_end(args);
 }
 8000a10:	bf00      	nop
 8000a12:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000a16:	46bd      	mov	sp, r7
 8000a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr
 8000a20:	20000210 	.word	0x20000210

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <Error_Handler+0x6>

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_MspInit+0x44>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_MspInit+0x44>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_MspInit+0x44>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x44>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x44>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x44>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f000 fcea 	bl	800143c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_CRC_MspInit+0x38>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10b      	bne.n	8000a9e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_CRC_MspInit+0x3c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_CRC_MspInit+0x3c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_CRC_MspInit+0x3c>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023000 	.word	0x40023000
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <HAL_UART_MspInit+0xdc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d129      	bne.n	8000b2a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a28      	ldr	r2, [pc, #160]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b06:	230c      	movs	r3, #12
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 ffc6 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b28:	e02d      	b.n	8000b86 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <HAL_UART_MspInit+0xe4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d128      	bne.n	8000b86 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3e:	61d3      	str	r3, [r2, #28]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b56:	6153      	str	r3, [r2, #20]
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0xe0>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b76:	2307      	movs	r3, #7
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <HAL_UART_MspInit+0xe8>)
 8000b82:	f000 ff97 	bl	8001ab4 <HAL_GPIO_Init>
}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	; 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40004800 	.word	0x40004800
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 fb54 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f003 fa0c 	bl	8004040 <__errno>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20010000 	.word	0x20010000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200001fc 	.word	0x200001fc
 8000c5c:	20000370 	.word	0x20000370

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <uart_rcv>:

#include "uart.h"

/* Receive the data through UART */
uart_status uart_rcv(uint8_t *data, uint16_t len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
  uart_status status_uart = UART_ERROR;
 8000c90:	23ff      	movs	r3, #255	; 0xff
 8000c92:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&huart3, data, len, UART_TIMEOUT))
 8000c94:	887a      	ldrh	r2, [r7, #2]
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <uart_rcv+0x34>)
 8000c9e:	f002 fd0f 	bl	80036c0 <HAL_UART_Receive>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <uart_rcv+0x28>
  {
    status_uart = UART_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  return status_uart;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000210 	.word	0x20000210

08000cbc <uart_trnsmt_str>:

/* Send the string data through UART */
uart_status uart_trnsmt_str(uint8_t *data)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uart_status status_uart = UART_ERROR;
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint16_t len = 0u;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	81bb      	strh	r3, [r7, #12]

  /* Find the length of data to be transmitted */
  while ('\0' != data[len])
 8000ccc:	e002      	b.n	8000cd4 <uart_trnsmt_str+0x18>
  {
    len++;
 8000cce:	89bb      	ldrh	r3, [r7, #12]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[len])
 8000cd4:	89bb      	ldrh	r3, [r7, #12]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f6      	bne.n	8000cce <uart_trnsmt_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart3, data, len, UART_TIMEOUT))
 8000ce0:	89ba      	ldrh	r2, [r7, #12]
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <uart_trnsmt_str+0x48>)
 8000cea:	f002 fc55 	bl	8003598 <HAL_UART_Transmit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <uart_trnsmt_str+0x3c>
  {
    status_uart = UART_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }

  return status_uart;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000210 	.word	0x20000210

08000d08 <uart_trnsmt_ch>:

/* send a single chracter through UART*/
uart_status uart_trnsmt_ch(uint8_t data)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  uart_status status_uart = UART_ERROR;
 8000d12:	23ff      	movs	r3, #255	; 0xff
 8000d14:	73fb      	strb	r3, [r7, #15]

  /* Get the state of the UART module */
  if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&huart3))
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <uart_trnsmt_ch+0x44>)
 8000d18:	f002 fe43 	bl	80039a2 <HAL_UART_GetState>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8000d20:	d102      	bne.n	8000d28 <uart_trnsmt_ch+0x20>
  {
    HAL_UART_Abort(&huart3);
 8000d22:	480a      	ldr	r0, [pc, #40]	; (8000d4c <uart_trnsmt_ch+0x44>)
 8000d24:	f002 fd9d 	bl	8003862 <HAL_UART_Abort>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart3, &data, 1u, UART_TIMEOUT))
 8000d28:	1df9      	adds	r1, r7, #7
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <uart_trnsmt_ch+0x44>)
 8000d32:	f002 fc31 	bl	8003598 <HAL_UART_Transmit>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <uart_trnsmt_ch+0x38>
  {
    status_uart = UART_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }
  return status_uart;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000210 	.word	0x20000210

08000d50 <xmodem_rcv>:
static xmodem_status xmodem_packet_handler(uint8_t size);   /* function to take the packet and write to the flash  */
static xmodem_status xmodem_error_handler(uint8_t *error_num, uint8_t max_error_num);   /* function to handle the error */

/* Receive the binary through XMODEM protocol */
void xmodem_rcv(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  volatile xmodem_status status = X_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	717b      	strb	r3, [r7, #5]
  uint8_t error_number = 0u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	713b      	strb	r3, [r7, #4]

  x_first_packet_received = false;
 8000d5e:	4b56      	ldr	r3, [pc, #344]	; (8000eb8 <xmodem_rcv+0x168>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
  xmodem_packet_number = 1u;
 8000d64:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <xmodem_rcv+0x16c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
  xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;
 8000d6a:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <xmodem_rcv+0x170>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a54      	ldr	r2, [pc, #336]	; (8000ec4 <xmodem_rcv+0x174>)
 8000d72:	6013      	str	r3, [r2, #0]

  /* Keep looping till there is an error or until there is an application jump */
  while (X_OK == status)
 8000d74:	e096      	b.n	8000ea4 <xmodem_rcv+0x154>
  {
    uint8_t header = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	70fb      	strb	r3, [r7, #3]

    /* receive the header through UART */
    uart_status comm_status = uart_rcv(&header, 1u);
 8000d7a:	1cfb      	adds	r3, r7, #3
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff80 	bl	8000c84 <uart_rcv>
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]

    /* notify the sender that we would use CRC-16 check */
    if ((UART_OK != comm_status) && (false == x_first_packet_received))
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <xmodem_rcv+0x4e>
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <xmodem_rcv+0x168>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <xmodem_rcv+0x4e>
    {
      (void)uart_trnsmt_ch(X_C);
 8000d96:	2043      	movs	r0, #67	; 0x43
 8000d98:	f7ff ffb6 	bl	8000d08 <uart_trnsmt_ch>
 8000d9c:	e00d      	b.n	8000dba <xmodem_rcv+0x6a>
    }
    /* handle the error if there is some timeout or any other errors */
    else if ((UART_OK != comm_status) && (true == x_first_packet_received))
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00a      	beq.n	8000dba <xmodem_rcv+0x6a>
 8000da4:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <xmodem_rcv+0x168>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <xmodem_rcv+0x6a>
    {
      status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2103      	movs	r1, #3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f9b5 	bl	8001120 <xmodem_error_handler>
 8000db6:	4603      	mov	r3, r0
 8000db8:	717b      	strb	r3, [r7, #5]
    }
    else
    {
    	/* Blank */
    }
    xmodem_status packet_status = X_ERROR;
 8000dba:	23ff      	movs	r3, #255	; 0xff
 8000dbc:	71bb      	strb	r3, [r7, #6]
    /* Check for headers: SOH, STX, EOT and CAN. */
    switch(header)
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	2b17      	cmp	r3, #23
 8000dc4:	d863      	bhi.n	8000e8e <xmodem_rcv+0x13e>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <xmodem_rcv+0x7c>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000e2d 	.word	0x08000e2d
 8000dd0:	08000e2d 	.word	0x08000e2d
 8000dd4:	08000e8f 	.word	0x08000e8f
 8000dd8:	08000e71 	.word	0x08000e71
 8000ddc:	08000e8f 	.word	0x08000e8f
 8000de0:	08000e8f 	.word	0x08000e8f
 8000de4:	08000e8f 	.word	0x08000e8f
 8000de8:	08000e8f 	.word	0x08000e8f
 8000dec:	08000e8f 	.word	0x08000e8f
 8000df0:	08000e8f 	.word	0x08000e8f
 8000df4:	08000e8f 	.word	0x08000e8f
 8000df8:	08000e8f 	.word	0x08000e8f
 8000dfc:	08000e8f 	.word	0x08000e8f
 8000e00:	08000e8f 	.word	0x08000e8f
 8000e04:	08000e8f 	.word	0x08000e8f
 8000e08:	08000e8f 	.word	0x08000e8f
 8000e0c:	08000e8f 	.word	0x08000e8f
 8000e10:	08000e8f 	.word	0x08000e8f
 8000e14:	08000e8f 	.word	0x08000e8f
 8000e18:	08000e8f 	.word	0x08000e8f
 8000e1c:	08000e8f 	.word	0x08000e8f
 8000e20:	08000e8f 	.word	0x08000e8f
 8000e24:	08000e8f 	.word	0x08000e8f
 8000e28:	08000e89 	.word	0x08000e89

      /* 128 or 1024 bytes of data. */
      case X_SOH: /* Blank */
      case X_STX:
    	  /* send acknowledge if packet handled successfully*/
        packet_status = xmodem_packet_handler(header);
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f888 	bl	8000f44 <xmodem_packet_handler>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71bb      	strb	r3, [r7, #6]
        if (X_OK == packet_status)
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <xmodem_rcv+0xf6>
        {
          uart_trnsmt_ch(X_ACK);
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff ff62 	bl	8000d08 <uart_trnsmt_ch>
        /* handle other errors */
        else
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
        }
        break;
 8000e44:	e02e      	b.n	8000ea4 <xmodem_rcv+0x154>
        else if (X_ERROR_FLASH == packet_status)
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d109      	bne.n	8000e60 <xmodem_rcv+0x110>
          error_number = X_MAX_ERRORS;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	713b      	strb	r3, [r7, #4]
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2103      	movs	r1, #3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f963 	bl	8001120 <xmodem_error_handler>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	717b      	strb	r3, [r7, #5]
        break;
 8000e5e:	e021      	b.n	8000ea4 <xmodem_rcv+0x154>
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2103      	movs	r1, #3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f95b 	bl	8001120 <xmodem_error_handler>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	717b      	strb	r3, [r7, #5]
        break;
 8000e6e:	e019      	b.n	8000ea4 <xmodem_rcv+0x154>
        /* X_EOT signifies end of transmission */
      case X_EOT:
    	  /* Send acknowledge to user to specify end and then jump to app */
        (void)uart_trnsmt_ch(X_ACK);
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff ff49 	bl	8000d08 <uart_trnsmt_ch>
        (void)uart_trnsmt_str((uint8_t*)"\n\rFirmware updated!\n\r");
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <xmodem_rcv+0x178>)
 8000e78:	f7ff ff20 	bl	8000cbc <uart_trnsmt_str>
        (void)uart_trnsmt_str((uint8_t*)"Jumping to user application...\n\r");
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <xmodem_rcv+0x17c>)
 8000e7e:	f7ff ff1d 	bl	8000cbc <uart_trnsmt_str>
        flash_jump_userapp();
 8000e82:	f7ff fa7d 	bl	8000380 <flash_jump_userapp>
        break;
 8000e86:	e00d      	b.n	8000ea4 <xmodem_rcv+0x154>
        /* Abort if error */
      case X_CAN:
        status = X_ERROR;
 8000e88:	23ff      	movs	r3, #255	; 0xff
 8000e8a:	717b      	strb	r3, [r7, #5]
        break;
 8000e8c:	e00a      	b.n	8000ea4 <xmodem_rcv+0x154>
      default:
    	  /* Incorrect header received*/
        if (UART_OK == comm_status)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d106      	bne.n	8000ea2 <xmodem_rcv+0x152>
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2103      	movs	r1, #3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f941 	bl	8001120 <xmodem_error_handler>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	717b      	strb	r3, [r7, #5]
        }
        break;
 8000ea2:	bf00      	nop
  while (X_OK == status)
 8000ea4:	797b      	ldrb	r3, [r7, #5]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f43f af64 	beq.w	8000d76 <xmodem_rcv+0x26>
    }
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000204 	.word	0x20000204
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	200002b8 	.word	0x200002b8
 8000ec4:	20000200 	.word	0x20000200
 8000ec8:	08004c24 	.word	0x08004c24
 8000ecc:	08004c3c 	.word	0x08004c3c

08000ed0 <xmodem_calculate_crc>:

/* Calculate the CRC-16 value for the input */
static uint16_t xmodem_calculate_crc(uint8_t *data, uint16_t len)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8000edc:	2300      	movs	r3, #0
 8000ede:	81fb      	strh	r3, [r7, #14]
    while (len)
 8000ee0:	e026      	b.n	8000f30 <xmodem_calculate_crc+0x60>
    {
        len--;
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ef8:	4053      	eors	r3, r2
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	737b      	strb	r3, [r7, #13]
 8000f02:	e012      	b.n	8000f2a <xmodem_calculate_crc+0x5a>
        {
            if (crc & 0x8000u)
 8000f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da08      	bge.n	8000f1e <xmodem_calculate_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	81fb      	strh	r3, [r7, #14]
 8000f1c:	e002      	b.n	8000f24 <xmodem_calculate_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
 8000f26:	3301      	adds	r3, #1
 8000f28:	737b      	strb	r3, [r7, #13]
 8000f2a:	7b7b      	ldrb	r3, [r7, #13]
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	d9e9      	bls.n	8000f04 <xmodem_calculate_crc+0x34>
    while (len)
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1d5      	bne.n	8000ee2 <xmodem_calculate_crc+0x12>
            }
        }
    }
    return crc;
 8000f36:	89fb      	ldrh	r3, [r7, #14]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <xmodem_packet_handler>:

/* Receive packet and write it to the flash */
static xmodem_status xmodem_packet_handler(uint8_t header)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
  xmodem_status status = X_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  uint16_t size = 0u;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
  uint8_t received_packet_data[X_PACKET_1024_SIZE];
  uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

  /* receive the size of the data. */
  if (X_SOH == header)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d103      	bne.n	8000f6e <xmodem_packet_handler+0x2a>
  {
    size = X_PACKET_128_SIZE;
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000f6c:	e00b      	b.n	8000f86 <xmodem_packet_handler+0x42>
  }
  else if (X_STX == header)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d104      	bne.n	8000f80 <xmodem_packet_handler+0x3c>
  {
    size = X_PACKET_1024_SIZE;
 8000f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000f7e:	e002      	b.n	8000f86 <xmodem_packet_handler+0x42>
  }
  else
  {
	  /* change the staus to error if wrong header*/
    status |= X_ERROR;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  uart_status comm_status = UART_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Receive the packet number, data and CRC from UART. */
  comm_status |= uart_rcv(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
 8000f8c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fe76 	bl	8000c84 <uart_rcv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= uart_rcv(&received_packet_data[0u], size);
 8000fa6:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fe67 	bl	8000c84 <uart_rcv>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= uart_rcv(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe5a 	bl	8000c84 <uart_rcv>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Combine the CRC two bytes */
  uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
  /* calculate the CRC bytes here too */
  uint16_t crc_calculated = xmodem_calculate_crc(&received_packet_data[0u], size);
 8000ff8:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff64 	bl	8000ed0 <xmodem_calculate_crc>
 8001008:	4603      	mov	r3, r0
 800100a:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

  /* if communication error, set the error status*/
  if (UART_OK != comm_status)
 800100e:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <xmodem_packet_handler+0xde>
  {
    status |= X_ERROR_UART;
 8001016:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  /* check if it is the first packet and if true erase the memory to receive the app data  */
  if ((X_OK == status) && (false == x_first_packet_received))
 8001022:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <xmodem_packet_handler+0x114>
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <xmodem_packet_handler+0x1cc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d112      	bne.n	8001058 <xmodem_packet_handler+0x114>
  {
    if (FLASH_OK == erase_flash(FLASH_APP_START_ADDRESS))
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <xmodem_packet_handler+0x1d0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f929 	bl	8000290 <erase_flash>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <xmodem_packet_handler+0x108>
    {
      x_first_packet_received = true;
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <xmodem_packet_handler+0x1cc>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e005      	b.n	8001058 <xmodem_packet_handler+0x114>
    }
    else
    {
      status |= X_ERROR_FLASH;
 800104c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

  /* start the error handling and flashing. */
  if (X_OK == status)
 8001058:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 800105c:	2b00      	cmp	r3, #0
 800105e:	d125      	bne.n	80010ac <xmodem_packet_handler+0x168>
  {
    if (xmodem_packet_number != received_packet_number[0u])
 8001060:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <xmodem_packet_handler+0x1d4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d005      	beq.n	8001078 <xmodem_packet_handler+0x134>
    {
    	/* Report error if there is packet number counter mismatch */
      status |= X_ERROR_NUMBER;
 800106c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
 8001078:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 800107c:	461a      	mov	r2, r3
 800107e:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8001082:	4413      	add	r3, r2
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d005      	beq.n	8001094 <xmodem_packet_handler+0x150>
    {
    	/* The sum of the packet number and packet number complement aren't 255. Report error */
      status |= X_ERROR_NUMBER;
 8001088:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (crc_calculated != crc_received)
 8001094:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8001098:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
 800109c:	429a      	cmp	r2, r3
 800109e:	d005      	beq.n	80010ac <xmodem_packet_handler+0x168>
    {
    	/* Report error if the calculated and received CRC are not same. */
      status |= X_ERROR_CRC;
 80010a0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

  /* Start the flashing if no errors */
    if ((X_OK == status) && (FLASH_OK != write_flash(xmodem_actual_flash_address, (uint32_t*)&received_packet_data[0u], (uint32_t)size/4u)))
 80010ac:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d114      	bne.n	80010de <xmodem_packet_handler+0x19a>
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <xmodem_packet_handler+0x1d8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	; 0x414
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff f906 	bl	80002d8 <write_flash>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <xmodem_packet_handler+0x19a>
    {
    	/* Report error if flashing problem */
      status |= X_ERROR_FLASH;
 80010d2:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    /* Increase the packet number and the address counters, if no errors found. */
  if (X_OK == status)
 80010de:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <xmodem_packet_handler+0x1bc>
  {
    xmodem_packet_number++;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <xmodem_packet_handler+0x1d4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <xmodem_packet_handler+0x1d4>)
 80010f0:	701a      	strb	r2, [r3, #0]
    xmodem_actual_flash_address += size;
 80010f2:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <xmodem_packet_handler+0x1d8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <xmodem_packet_handler+0x1d8>)
 80010fe:	6013      	str	r3, [r2, #0]
  }

  return status;
 8001100:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
 8001104:	4618      	mov	r0, r3
 8001106:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000204 	.word	0x20000204
 8001114:	200002b8 	.word	0x200002b8
 8001118:	20000004 	.word	0x20000004
 800111c:	20000200 	.word	0x20000200

08001120 <xmodem_error_handler>:

/* Function to handle errors when receving the binary through XMODEM protocol */
static xmodem_status xmodem_error_handler(uint8_t *error_num, uint8_t max_error_num)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  xmodem_status status_xmodem = X_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
  /* Increment the error counter*/
  (*error_num)++;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	701a      	strb	r2, [r3, #0]
  /* abort, if maximum value reached */
  if ((*error_num) >= max_error_num)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	78fa      	ldrb	r2, [r7, #3]
 8001142:	429a      	cmp	r2, r3
 8001144:	d808      	bhi.n	8001158 <xmodem_error_handler+0x38>
  {
    (void)uart_trnsmt_ch(X_CAN);
 8001146:	2018      	movs	r0, #24
 8001148:	f7ff fdde 	bl	8000d08 <uart_trnsmt_ch>
    (void)uart_trnsmt_ch(X_CAN);
 800114c:	2018      	movs	r0, #24
 800114e:	f7ff fddb 	bl	8000d08 <uart_trnsmt_ch>
    status_xmodem = X_ERROR;
 8001152:	23ff      	movs	r3, #255	; 0xff
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e004      	b.n	8001162 <xmodem_error_handler+0x42>
  }
  /* Else, send a NAK for a repeat. */
  else
  {
    (void)uart_trnsmt_ch(X_NAK);
 8001158:	2015      	movs	r0, #21
 800115a:	f7ff fdd5 	bl	8000d08 <uart_trnsmt_ch>
    status_xmodem = X_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  }
  return status_xmodem;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopForever+0xe>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001196:	f7ff fd63 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f002 ff57 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119e:	f7ff f90b 	bl	80003b8 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80011b0:	08004de0 	.word	0x08004de0
  ldr r2, =_sbss
 80011b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80011b8:	2000036c 	.word	0x2000036c

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f933 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f82e 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fc26 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_DeInit+0x38>)
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_DeInit+0x38>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_DeInit+0x38>)
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_DeInit+0x38>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_DeInit+0x38>)
 800120e:	f04f 32ff 	mov.w	r2, #4294967295
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_DeInit+0x38>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800121a:	f000 f805 	bl	8001228 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f917 	bl	800148a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f8ed 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000008 	.word	0x20000008

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	2000000c 	.word	0x2000000c
 80012bc:	20000344 	.word	0x20000344

080012c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000344 	.word	0x20000344

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff47 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5c 	bl	8001320 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e054      	b.n	8001560 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7f5b      	ldrb	r3, [r3, #29]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fad4 	bl	8000a74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <HAL_CRC_Init+0xc4>)
 80014e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0218 	bic.w	r2, r2, #24
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	e00c      	b.n	800150e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	461a      	mov	r2, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f834 	bl	800156c <HAL_CRCEx_Polynomial_Set>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e028      	b.n	8001560 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f04f 32ff 	mov.w	r2, #4294967295
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	e004      	b.n	800152c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6912      	ldr	r2, [r2, #16]
 800152a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	04c11db7 	.word	0x04c11db7

0800156c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800157c:	231f      	movs	r3, #31
 800157e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001580:	bf00      	nop
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	613a      	str	r2, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b18      	cmp	r3, #24
 80015a4:	d846      	bhi.n	8001634 <HAL_CRCEx_Polynomial_Set+0xc8>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	0800163b 	.word	0x0800163b
 80015b0:	08001635 	.word	0x08001635
 80015b4:	08001635 	.word	0x08001635
 80015b8:	08001635 	.word	0x08001635
 80015bc:	08001635 	.word	0x08001635
 80015c0:	08001635 	.word	0x08001635
 80015c4:	08001635 	.word	0x08001635
 80015c8:	08001635 	.word	0x08001635
 80015cc:	08001629 	.word	0x08001629
 80015d0:	08001635 	.word	0x08001635
 80015d4:	08001635 	.word	0x08001635
 80015d8:	08001635 	.word	0x08001635
 80015dc:	08001635 	.word	0x08001635
 80015e0:	08001635 	.word	0x08001635
 80015e4:	08001635 	.word	0x08001635
 80015e8:	08001635 	.word	0x08001635
 80015ec:	0800161d 	.word	0x0800161d
 80015f0:	08001635 	.word	0x08001635
 80015f4:	08001635 	.word	0x08001635
 80015f8:	08001635 	.word	0x08001635
 80015fc:	08001635 	.word	0x08001635
 8001600:	08001635 	.word	0x08001635
 8001604:	08001635 	.word	0x08001635
 8001608:	08001635 	.word	0x08001635
 800160c:	08001611 	.word	0x08001611
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d913      	bls.n	800163e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800161a:	e010      	b.n	800163e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b07      	cmp	r3, #7
 8001620:	d90f      	bls.n	8001642 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001626:	e00c      	b.n	8001642 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	d90b      	bls.n	8001646 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001632:	e008      	b.n	8001646 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
      break;
 8001638:	e006      	b.n	8001648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800163a:	bf00      	nop
 800163c:	e004      	b.n	8001648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800163e:	bf00      	nop
 8001640:	e002      	b.n	8001648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001646:	bf00      	nop
  }
  if (status == HAL_OK)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 0118 	bic.w	r1, r3, #24
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800166a:	7dfb      	ldrb	r3, [r7, #23]
}
 800166c:	4618      	mov	r0, r3
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001686:	2b02      	cmp	r3, #2
 8001688:	d008      	beq.n	800169c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2204      	movs	r2, #4
 800168e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e020      	b.n	80016de <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 020e 	bic.w	r2, r2, #14
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_FLASH_Program+0xd8>)
 8001720:	7e1b      	ldrb	r3, [r3, #24]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_FLASH_Program+0x26>
 8001726:	2302      	movs	r3, #2
 8001728:	e054      	b.n	80017d4 <HAL_FLASH_Program+0xd0>
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_FLASH_Program+0xd8>)
 800172c:	2201      	movs	r2, #1
 800172e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001734:	f000 f8a8 	bl	8001888 <FLASH_WaitForLastOperation>
 8001738:	4603      	mov	r3, r0
 800173a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d144      	bne.n	80017cc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001748:	2301      	movs	r3, #1
 800174a:	757b      	strb	r3, [r7, #21]
 800174c:	e007      	b.n	800175e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d102      	bne.n	800175a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001754:	2302      	movs	r3, #2
 8001756:	757b      	strb	r3, [r7, #21]
 8001758:	e001      	b.n	800175e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800175a:	2304      	movs	r3, #4
 800175c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800175e:	2300      	movs	r3, #0
 8001760:	75bb      	strb	r3, [r7, #22]
 8001762:	e02d      	b.n	80017c0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001764:	7dbb      	ldrb	r3, [r7, #22]
 8001766:	005a      	lsls	r2, r3, #1
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	eb02 0c03 	add.w	ip, r2, r3
 800176e:	7dbb      	ldrb	r3, [r7, #22]
 8001770:	0119      	lsls	r1, r3, #4
 8001772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001776:	f1c1 0620 	rsb	r6, r1, #32
 800177a:	f1a1 0020 	sub.w	r0, r1, #32
 800177e:	fa22 f401 	lsr.w	r4, r2, r1
 8001782:	fa03 f606 	lsl.w	r6, r3, r6
 8001786:	4334      	orrs	r4, r6
 8001788:	fa23 f000 	lsr.w	r0, r3, r0
 800178c:	4304      	orrs	r4, r0
 800178e:	fa23 f501 	lsr.w	r5, r3, r1
 8001792:	b2a3      	uxth	r3, r4
 8001794:	4619      	mov	r1, r3
 8001796:	4660      	mov	r0, ip
 8001798:	f000 f85a 	bl	8001850 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800179c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017a0:	f000 f872 	bl	8001888 <FLASH_WaitForLastOperation>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_FLASH_Program+0xdc>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_FLASH_Program+0xdc>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d107      	bne.n	80017ca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80017ba:	7dbb      	ldrb	r3, [r7, #22]
 80017bc:	3301      	adds	r3, #1
 80017be:	75bb      	strb	r3, [r7, #22]
 80017c0:	7dba      	ldrb	r2, [r7, #22]
 80017c2:	7d7b      	ldrb	r3, [r7, #21]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d3cd      	bcc.n	8001764 <HAL_FLASH_Program+0x60>
 80017c8:	e000      	b.n	80017cc <HAL_FLASH_Program+0xc8>
      {
        break;
 80017ca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_FLASH_Program+0xd8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]

  return status;
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	20000348 	.word	0x20000348
 80017e0:	40022000 	.word	0x40022000

080017e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_FLASH_Unlock+0x40>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_FLASH_Unlock+0x40>)
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_FLASH_Unlock+0x44>)
 80017fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_FLASH_Unlock+0x40>)
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_FLASH_Unlock+0x48>)
 8001804:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_FLASH_Unlock+0x40>)
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001816:	79fb      	ldrb	r3, [r7, #7]
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40022000 	.word	0x40022000
 8001828:	45670123 	.word	0x45670123
 800182c:	cdef89ab 	.word	0xcdef89ab

08001830 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_FLASH_Lock+0x1c>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_FLASH_Lock+0x1c>)
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40022000 	.word	0x40022000

08001850 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <FLASH_Program_HalfWord+0x30>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <FLASH_Program_HalfWord+0x34>)
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <FLASH_Program_HalfWord+0x34>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	801a      	strh	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	20000348 	.word	0x20000348
 8001884:	40022000 	.word	0x40022000

08001888 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fd16 	bl	80012c0 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001896:	e010      	b.n	80018ba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d00c      	beq.n	80018ba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <FLASH_WaitForLastOperation+0x2e>
 80018a6:	f7ff fd0b 	bl	80012c0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d201      	bcs.n	80018ba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e01f      	b.n	80018fa <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <FLASH_WaitForLastOperation+0x7c>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d0e8      	beq.n	8001898 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <FLASH_WaitForLastOperation+0x7c>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d102      	bne.n	80018d8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <FLASH_WaitForLastOperation+0x7c>)
 80018d4:	2220      	movs	r2, #32
 80018d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <FLASH_WaitForLastOperation+0x7c>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	d005      	beq.n	80018f0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <FLASH_WaitForLastOperation+0x7c>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d103      	bne.n	80018f8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018f0:	f000 f80a 	bl	8001908 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000

08001908 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <FLASH_SetErrorCode+0x5c>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b10      	cmp	r3, #16
 800191c:	d109      	bne.n	8001932 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <FLASH_SetErrorCode+0x60>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <FLASH_SetErrorCode+0x60>)
 8001928:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <FLASH_SetErrorCode+0x5c>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d109      	bne.n	8001952 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <FLASH_SetErrorCode+0x60>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <FLASH_SetErrorCode+0x60>)
 8001948:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <FLASH_SetErrorCode+0x5c>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	60d3      	str	r3, [r2, #12]
}  
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40022000 	.word	0x40022000
 8001968:	20000348 	.word	0x20000348

0800196c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_FLASHEx_Erase+0xcc>)
 8001980:	7e1b      	ldrb	r3, [r3, #24]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_FLASHEx_Erase+0x1e>
 8001986:	2302      	movs	r3, #2
 8001988:	e052      	b.n	8001a30 <HAL_FLASHEx_Erase+0xc4>
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_FLASHEx_Erase+0xcc>)
 800198c:	2201      	movs	r2, #1
 800198e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d115      	bne.n	80019c4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800199c:	f7ff ff74 	bl	8001888 <FLASH_WaitForLastOperation>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d140      	bne.n	8001a28 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80019a6:	f000 f84b 	bl	8001a40 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019ae:	f7ff ff6b 	bl	8001888 <FLASH_WaitForLastOperation>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_FLASHEx_Erase+0xd0>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <HAL_FLASHEx_Erase+0xd0>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6113      	str	r3, [r2, #16]
 80019c2:	e031      	b.n	8001a28 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019c8:	f7ff ff5e 	bl	8001888 <FLASH_WaitForLastOperation>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d12a      	bne.n	8001a28 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	e019      	b.n	8001a16 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f000 f846 	bl	8001a74 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019ec:	f7ff ff4c 	bl	8001888 <FLASH_WaitForLastOperation>
 80019f0:	4603      	mov	r3, r0
 80019f2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_FLASHEx_Erase+0xd0>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_FLASHEx_Erase+0xd0>)
 80019fa:	f023 0302 	bic.w	r3, r3, #2
 80019fe:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	601a      	str	r2, [r3, #0]
            break;
 8001a0c:	e00c      	b.n	8001a28 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	02da      	lsls	r2, r3, #11
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3dc      	bcc.n	80019e2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_FLASHEx_Erase+0xcc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	761a      	strb	r2, [r3, #24]

  return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000348 	.word	0x20000348
 8001a3c:	40022000 	.word	0x40022000

08001a40 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <FLASH_MassErase+0x2c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <FLASH_MassErase+0x30>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <FLASH_MassErase+0x30>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <FLASH_MassErase+0x30>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <FLASH_MassErase+0x30>)
 8001a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a60:	6113      	str	r3, [r2, #16]
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20000348 	.word	0x20000348
 8001a70:	40022000 	.word	0x40022000

08001a74 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <FLASH_PageErase+0x38>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <FLASH_PageErase+0x3c>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <FLASH_PageErase+0x3c>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <FLASH_PageErase+0x3c>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <FLASH_PageErase+0x3c>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <FLASH_PageErase+0x3c>)
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9e:	6113      	str	r3, [r2, #16]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	20000348 	.word	0x20000348
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e160      	b.n	8001d86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8152 	beq.w	8001d80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d00b      	beq.n	8001afc <HAL_GPIO_Init+0x48>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0xea>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80ac 	beq.w	8001d80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c40:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <HAL_GPIO_Init+0x2f4>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6a:	d025      	beq.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x2f8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d01f      	beq.n	8001cb4 <HAL_GPIO_Init+0x200>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4e      	ldr	r2, [pc, #312]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d019      	beq.n	8001cb0 <HAL_GPIO_Init+0x1fc>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1f8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_GPIO_Init+0x308>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1f0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4a      	ldr	r2, [pc, #296]	; (8001dc0 <HAL_GPIO_Init+0x30c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1ec>
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	e00c      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	e00a      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	e008      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cac:	2303      	movs	r3, #3
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x206>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cca:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_GPIO_Init+0x2f4>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfc:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d26:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f ae97 	bne.w	8001ac4 <HAL_GPIO_Init+0x10>
  }
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800
 8001db4:	48000c00 	.word	0x48000c00
 8001db8:	48001000 	.word	0x48001000
 8001dbc:	48001400 	.word	0x48001400
 8001dc0:	48001800 	.word	0x48001800
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f000 bf01 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8160 	beq.w	8002112 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e52:	4bae      	ldr	r3, [pc, #696]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d00c      	beq.n	8001e78 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e5e:	4bab      	ldr	r3, [pc, #684]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d159      	bne.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001e6a:	4ba8      	ldr	r3, [pc, #672]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d152      	bne.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_RCC_OscConfig+0x82>
 8001ea4:	4b99      	ldr	r3, [pc, #612]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0xae>
 8001eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ec6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ed2:	4b8e      	ldr	r3, [pc, #568]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eda:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001ede:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001eea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8102 	beq.w	8002110 <HAL_RCC_OscConfig+0x2e8>
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80fc 	bne.w	8002110 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f000 be93 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x110>
 8001f2a:	4b78      	ldr	r3, [pc, #480]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a77      	ldr	r2, [pc, #476]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e030      	b.n	8001f9a <HAL_RCC_OscConfig+0x172>
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x134>
 8001f42:	4b72      	ldr	r3, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a71      	ldr	r2, [pc, #452]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b6f      	ldr	r3, [pc, #444]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6e      	ldr	r2, [pc, #440]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01e      	b.n	8001f9a <HAL_RCC_OscConfig+0x172>
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x15a>
 8001f68:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a64      	ldr	r2, [pc, #400]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x172>
 8001f82:	4b62      	ldr	r3, [pc, #392]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a61      	ldr	r2, [pc, #388]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5e      	ldr	r2, [pc, #376]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d059      	beq.n	8002058 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f98c 	bl	80012c0 <HAL_GetTick>
 8001fa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fae:	f7ff f987 	bl	80012c0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f000 be40 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001fd8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x1ce>
 8001ff0:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x1fa>
 8001ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800200a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002012:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002026:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800202a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002036:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	f042 0220 	orr.w	r2, r2, #32
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f002 021f 	and.w	r2, r2, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ab      	beq.n	8001fae <HAL_RCC_OscConfig+0x186>
 8002056:	e05c      	b.n	8002112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f932 	bl	80012c0 <HAL_GetTick>
 800205c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002062:	f7ff f92d 	bl	80012c0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d902      	bls.n	8002078 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	f000 bde6 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800208c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_OscConfig+0x282>
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x2ae>
 80020aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80020be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCC_OscConfig+0x2e4>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80020de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80020e2:	fa92 f2a2 	rbit	r2, r2
 80020e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80020ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020ee:	fab2 f282 	clz	r2, r2
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f002 021f 	and.w	r2, r2, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ab      	bne.n	8002062 <HAL_RCC_OscConfig+0x23a>
 800210a:	e002      	b.n	8002112 <HAL_RCC_OscConfig+0x2ea>
 800210c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8170 	beq.w	8002402 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002122:	4bd0      	ldr	r3, [pc, #832]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800212e:	4bcd      	ldr	r3, [pc, #820]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d16d      	bne.n	8002216 <HAL_RCC_OscConfig+0x3ee>
 800213a:	4bca      	ldr	r3, [pc, #808]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002146:	d166      	bne.n	8002216 <HAL_RCC_OscConfig+0x3ee>
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800215a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_RCC_OscConfig+0x350>
 8002172:	4bbc      	ldr	r3, [pc, #752]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e013      	b.n	80021a0 <HAL_RCC_OscConfig+0x378>
 8002178:	2302      	movs	r3, #2
 800217a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002190:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800219c:	4bb1      	ldr	r3, [pc, #708]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2202      	movs	r2, #2
 80021a2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80021a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80021aa:	fa92 f2a2 	rbit	r2, r2
 80021ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80021b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 021f 	and.w	r2, r2, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3ba>
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d002      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f000 bd31 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4ba0      	ldr	r3, [pc, #640]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	21f8      	movs	r1, #248	; 0xf8
 80021f2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80021fa:	fa91 f1a1 	rbit	r1, r1
 80021fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002202:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002206:	fab1 f181 	clz	r1, r1
 800220a:	b2c9      	uxtb	r1, r1
 800220c:	408b      	lsls	r3, r1
 800220e:	4995      	ldr	r1, [pc, #596]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002214:	e0f5      	b.n	8002402 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8085 	beq.w	800232c <HAL_RCC_OscConfig+0x504>
 8002222:	2301      	movs	r3, #1
 8002224:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002234:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	461a      	mov	r2, r3
 800224a:	2301      	movs	r3, #1
 800224c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff f837 	bl	80012c0 <HAL_GetTick>
 8002252:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	e00a      	b.n	800226e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002258:	f7ff f832 	bl	80012c0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d902      	bls.n	800226e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	f000 bceb 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002280:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0x476>
 8002298:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e013      	b.n	80022c6 <HAL_RCC_OscConfig+0x49e>
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022c2:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2202      	movs	r2, #2
 80022c8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80022cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80022d0:	fa92 f2a2 	rbit	r2, r2
 80022d4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80022d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f002 021f 	and.w	r2, r2, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0af      	beq.n	8002258 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b5a      	ldr	r3, [pc, #360]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	21f8      	movs	r1, #248	; 0xf8
 8002308:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002310:	fa91 f1a1 	rbit	r1, r1
 8002314:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002318:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800231c:	fab1 f181 	clz	r1, r1
 8002320:	b2c9      	uxtb	r1, r1
 8002322:	408b      	lsls	r3, r1
 8002324:	494f      	ldr	r1, [pc, #316]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
 800232a:	e06a      	b.n	8002402 <HAL_RCC_OscConfig+0x5da>
 800232c:	2301      	movs	r3, #1
 800232e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800233e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800234c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	461a      	mov	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe ffb2 	bl	80012c0 <HAL_GetTick>
 800235c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002362:	f7fe ffad 	bl	80012c0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d902      	bls.n	8002378 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	f000 bc66 	b.w	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800238a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0x580>
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0x5a8>
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80023ba:	2302      	movs	r3, #2
 80023bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x63c>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2202      	movs	r2, #2
 80023d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80023d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023da:	fa92 f2a2 	rbit	r2, r2
 80023de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80023e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f002 021f 	and.w	r2, r2, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1af      	bne.n	8002362 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80da 	beq.w	80025c6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d069      	beq.n	80024f0 <HAL_RCC_OscConfig+0x6c8>
 800241c:	2301      	movs	r3, #1
 800241e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800242e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x640>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	2301      	movs	r3, #1
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe ff3b 	bl	80012c0 <HAL_GetTick>
 800244a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e00d      	b.n	800246c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe ff36 	bl	80012c0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d905      	bls.n	800246c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e3ef      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8002464:	40021000 	.word	0x40021000
 8002468:	10908120 	.word	0x10908120
 800246c:	2302      	movs	r3, #2
 800246e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002484:	2202      	movs	r2, #2
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b0:	4ba4      	ldr	r3, [pc, #656]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80024b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80024b8:	2102      	movs	r1, #2
 80024ba:	6019      	str	r1, [r3, #0]
 80024bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f1a3 	rbit	r1, r3
 80024c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024ca:	6019      	str	r1, [r3, #0]
  return result;
 80024cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0b0      	beq.n	8002450 <HAL_RCC_OscConfig+0x628>
 80024ee:	e06a      	b.n	80025c6 <HAL_RCC_OscConfig+0x79e>
 80024f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002506:	601a      	str	r2, [r3, #0]
  return result;
 8002508:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800250c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x920>)
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	2300      	movs	r3, #0
 8002520:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fecd 	bl	80012c0 <HAL_GetTick>
 8002526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252a:	e009      	b.n	8002540 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fec8 	bl	80012c0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e381      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8002540:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800255c:	2202      	movs	r2, #2
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b6e      	ldr	r3, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 800258a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002590:	2102      	movs	r1, #2
 8002592:	6019      	str	r1, [r3, #0]
 8002594:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f1a3 	rbit	r1, r3
 800259e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025a2:	6019      	str	r1, [r3, #0]
  return result;
 80025a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1b2      	bne.n	800252c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8157 	beq.w	8002884 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d112      	bne.n	800260e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCC_OscConfig+0x924>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <HAL_RCC_OscConfig+0x924>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a4b      	ldr	r2, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x924>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fe4b 	bl	80012c0 <HAL_GetTick>
 800262a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	e009      	b.n	8002644 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7fe fe46 	bl	80012c0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e2ff      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x924>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x840>
 800265a:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a39      	ldr	r2, [pc, #228]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	e02f      	b.n	80026c8 <HAL_RCC_OscConfig+0x8a0>
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x864>
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a33      	ldr	r2, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0x8a0>
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x888>
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x8a0>
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d06a      	beq.n	80027a8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fdf5 	bl	80012c0 <HAL_GetTick>
 80026d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fdf0 	bl	80012c0 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e2a7      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 80026f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002722:	601a      	str	r2, [r3, #0]
  return result;
 8002724:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002728:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d108      	bne.n	8002750 <HAL_RCC_OscConfig+0x928>
 800273e:	4b01      	ldr	r3, [pc, #4]	; (8002744 <HAL_RCC_OscConfig+0x91c>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x944>
 8002744:	40021000 	.word	0x40021000
 8002748:	10908120 	.word	0x10908120
 800274c:	40007000 	.word	0x40007000
 8002750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002754:	2202      	movs	r2, #2
 8002756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	4bc0      	ldr	r3, [pc, #768]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002770:	2102      	movs	r1, #2
 8002772:	6011      	str	r1, [r2, #0]
 8002774:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	fa92 f1a2 	rbit	r1, r2
 800277e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002782:	6011      	str	r1, [r2, #0]
  return result;
 8002784:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d09a      	beq.n	80026dc <HAL_RCC_OscConfig+0x8b4>
 80027a6:	e063      	b.n	8002870 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fd8a 	bl	80012c0 <HAL_GetTick>
 80027ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fd85 	bl	80012c0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e23c      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 80027ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027ce:	2202      	movs	r2, #2
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027e6:	2202      	movs	r2, #2
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027f8:	601a      	str	r2, [r3, #0]
  return result;
 80027fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d102      	bne.n	800281a <HAL_RCC_OscConfig+0x9f2>
 8002814:	4b95      	ldr	r3, [pc, #596]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	e00d      	b.n	8002836 <HAL_RCC_OscConfig+0xa0e>
 800281a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	fa93 f2a3 	rbit	r2, r3
 800282c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4b8e      	ldr	r3, [pc, #568]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800283a:	2102      	movs	r1, #2
 800283c:	6011      	str	r1, [r2, #0]
 800283e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	fa92 f1a2 	rbit	r1, r2
 8002848:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800284c:	6011      	str	r1, [r2, #0]
  return result;
 800284e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f002 021f 	and.w	r2, r2, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1a0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002870:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002874:	2b01      	cmp	r3, #1
 8002876:	d105      	bne.n	8002884 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002878:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4a7b      	ldr	r2, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 800287e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002882:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 81d9 	beq.w	8002c42 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002890:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	f000 81a6 	beq.w	8002bea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	f040 811e 	bne.w	8002ae6 <HAL_RCC_OscConfig+0xcbe>
 80028aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80028ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028c2:	601a      	str	r2, [r3, #0]
  return result;
 80028c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	461a      	mov	r2, r3
 80028dc:	2300      	movs	r3, #0
 80028de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcee 	bl	80012c0 <HAL_GetTick>
 80028e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e8:	e009      	b.n	80028fe <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fce9 	bl	80012c0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1a2      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 80028fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002916:	601a      	str	r2, [r3, #0]
  return result;
 8002918:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800291c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0xb10>
 8002932:	4b4e      	ldr	r3, [pc, #312]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e01b      	b.n	8002970 <HAL_RCC_OscConfig+0xb48>
 8002938:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800293c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	fa93 f2a3 	rbit	r2, r3
 800294c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002978:	6011      	str	r1, [r2, #0]
 800297a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fa92 f1a2 	rbit	r1, r2
 8002984:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002988:	6011      	str	r1, [r2, #0]
  return result;
 800298a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0220 	orr.w	r2, r2, #32
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d19e      	bne.n	80028ea <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f023 020f 	bic.w	r2, r3, #15
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	492c      	ldr	r1, [pc, #176]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	62cb      	str	r3, [r1, #44]	; 0x2c
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a19      	ldr	r1, [r3, #32]
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	4925      	ldr	r1, [pc, #148]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 80029dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029f4:	601a      	str	r2, [r3, #0]
  return result;
 80029f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fc55 	bl	80012c0 <HAL_GetTick>
 8002a16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1a:	e009      	b.n	8002a30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fc50 	bl	80012c0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e109      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8002a30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a48:	601a      	str	r2, [r3, #0]
  return result;
 8002a4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0xc48>
 8002a64:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <HAL_RCC_OscConfig+0xc44>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	e01e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xc80>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0xe28>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002aac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	fa92 f1a2 	rbit	r1, r2
 8002abc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ac0:	6011      	str	r1, [r2, #0]
  return result;
 8002ac2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	fab2 f282 	clz	r2, r2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d09b      	beq.n	8002a1c <HAL_RCC_OscConfig+0xbf4>
 8002ae4:	e0ad      	b.n	8002c42 <HAL_RCC_OscConfig+0xe1a>
 8002ae6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	fa93 f2a3 	rbit	r2, r3
 8002afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002afe:	601a      	str	r2, [r3, #0]
  return result;
 8002b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	461a      	mov	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fbd0 	bl	80012c0 <HAL_GetTick>
 8002b20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe fbcb 	bl	80012c0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e084      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
 8002b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b52:	601a      	str	r2, [r3, #0]
  return result;
 8002b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_OscConfig+0xd4c>
 8002b6e:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <HAL_RCC_OscConfig+0xe28>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	e01b      	b.n	8002bac <HAL_RCC_OscConfig+0xd84>
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f107 0320 	add.w	r3, r7, #32
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f107 0318 	add.w	r3, r7, #24
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCC_OscConfig+0xe28>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f107 0214 	add.w	r2, r7, #20
 8002bb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	f107 0214 	add.w	r2, r7, #20
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	fa92 f1a2 	rbit	r1, r2
 8002bc0:	f107 0210 	add.w	r2, r7, #16
 8002bc4:	6011      	str	r1, [r2, #0]
  return result;
 8002bc6:	f107 0210 	add.w	r2, r7, #16
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d19e      	bne.n	8002b26 <HAL_RCC_OscConfig+0xcfe>
 8002be8:	e02b      	b.n	8002c42 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e025      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_RCC_OscConfig+0xe28>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCC_OscConfig+0xe28>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c0c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d111      	bne.n	8002c3e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d108      	bne.n	8002c3e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b09e      	sub	sp, #120	; 0x78
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e162      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b90      	ldr	r3, [pc, #576]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d910      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0207 	bic.w	r2, r3, #7
 8002c82:	498b      	ldr	r1, [pc, #556]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b89      	ldr	r3, [pc, #548]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e14a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	497f      	ldr	r1, [pc, #508]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80dc 	beq.w	8002e80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d13c      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xf6>
 8002cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xa6>
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	e00f      	b.n	8002d1a <HAL_RCC_ClockConfig+0xc6>
 8002cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	667b      	str	r3, [r7, #100]	; 0x64
 8002d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d17b      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0f3      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d13c      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x178>
 8002d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x128>
 8002d76:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e00f      	b.n	8002d9c <HAL_RCC_ClockConfig+0x148>
 8002d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da4:	fa92 f2a2 	rbit	r2, r2
 8002da8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dac:	fab2 f282 	clz	r2, r2
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f042 0220 	orr.w	r2, r2, #32
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f002 021f 	and.w	r2, r2, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d13a      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0b2      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e00d      	b.n	8002e10 <HAL_RCC_ClockConfig+0x1bc>
 8002df4:	2302      	movs	r3, #2
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002e00:	2302      	movs	r3, #2
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2202      	movs	r2, #2
 8002e12:	61ba      	str	r2, [r7, #24]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	fa92 f2a2 	rbit	r2, r2
 8002e1a:	617a      	str	r2, [r7, #20]
  return result;
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e079      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 0203 	bic.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	491a      	ldr	r1, [pc, #104]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fa36 	bl	80012c0 <HAL_GetTick>
 8002e54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e58:	f7fe fa32 	bl	80012c0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e061      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCC_ClockConfig+0x260>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 020c 	and.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1eb      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d214      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4906      	ldr	r1, [pc, #24]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e040      	b.n	8002f32 <HAL_RCC_ClockConfig+0x2de>
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	491a      	ldr	r1, [pc, #104]	; (8002f3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4912      	ldr	r1, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ef6:	f000 f829 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002efa:	4601      	mov	r1, r0
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_RCC_ClockConfig+0x2e8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f04:	22f0      	movs	r2, #240	; 0xf0
 8002f06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	fa92 f2a2 	rbit	r2, r2
 8002f0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	fab2 f282 	clz	r2, r2
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	40d3      	lsrs	r3, r2
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x2ec>)
 8002f1c:	5cd3      	ldrb	r3, [r2, r3]
 8002f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_RCC_ClockConfig+0x2f0>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_RCC_ClockConfig+0x2f4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f984 	bl	8001238 <HAL_InitTick>
  
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3778      	adds	r7, #120	; 0x78
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08004c60 	.word	0x08004c60
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000008 	.word	0x20000008

08002f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b08b      	sub	sp, #44	; 0x2c
 8002f50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x30>
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x36>
 8002f7a:	e03f      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f7e:	623b      	str	r3, [r7, #32]
      break;
 8002f80:	e03f      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	fa92 f2a2 	rbit	r2, r2
 8002f94:	607a      	str	r2, [r7, #4]
  return result;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	40d3      	lsrs	r3, r2
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	220f      	movs	r2, #15
 8002fb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	60fa      	str	r2, [r7, #12]
  return result;
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	40d3      	lsrs	r3, r2
 8002fc4:	4a15      	ldr	r2, [pc, #84]	; (800301c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	e007      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	623b      	str	r3, [r7, #32]
      break;
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ffe:	623b      	str	r3, [r7, #32]
      break;
 8003000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003002:	6a3b      	ldr	r3, [r7, #32]
}
 8003004:	4618      	mov	r0, r3
 8003006:	372c      	adds	r7, #44	; 0x2c
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40021000 	.word	0x40021000
 8003014:	007a1200 	.word	0x007a1200
 8003018:	08004c78 	.word	0x08004c78
 800301c:	08004c88 	.word	0x08004c88

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_GetHCLKFreq+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800303e:	f7ff ffef 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003042:	4601      	mov	r1, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800304c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003050:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	fa92 f2a2 	rbit	r2, r2
 8003058:	603a      	str	r2, [r7, #0]
  return result;
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	40d3      	lsrs	r3, r2
 8003064:	4a04      	ldr	r2, [pc, #16]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	08004c70 	.word	0x08004c70

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003082:	f7ff ffcd 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003086:	4601      	mov	r1, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003090:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003094:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	fa92 f2a2 	rbit	r2, r2
 800309c:	603a      	str	r2, [r7, #0]
  return result;
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	40d3      	lsrs	r3, r2
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08004c70 	.word	0x08004c70

080030c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b092      	sub	sp, #72	; 0x48
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80d4 	beq.w	800328c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e4:	4b4e      	ldr	r3, [pc, #312]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10e      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	4b4b      	ldr	r3, [pc, #300]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fa:	61d3      	str	r3, [r2, #28]
 80030fc:	4b48      	ldr	r3, [pc, #288]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b45      	ldr	r3, [pc, #276]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b42      	ldr	r3, [pc, #264]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a41      	ldr	r2, [pc, #260]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fe f8cb 	bl	80012c0 <HAL_GetTick>
 800312a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe f8c7 	bl	80012c0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1d6      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800314c:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8084 	beq.w	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003168:	429a      	cmp	r2, r3
 800316a:	d07c      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	2301      	movs	r3, #1
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	2300      	movs	r3, #0
 80031bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031be:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04b      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe f877 	bl	80012c0 <HAL_GetTick>
 80031d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	e00a      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe f873 	bl	80012c0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e180      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031ec:	2302      	movs	r3, #2
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
 80031f8:	2302      	movs	r3, #2
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	61fb      	str	r3, [r7, #28]
  return result;
 8003204:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d108      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800321a:	4b01      	ldr	r3, [pc, #4]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	e00d      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
 8003228:	10908100 	.word	0x10908100
 800322c:	2302      	movs	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	4ba0      	ldr	r3, [pc, #640]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	2202      	movs	r2, #2
 800323e:	613a      	str	r2, [r7, #16]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	fa92 f2a2 	rbit	r2, r2
 8003246:	60fa      	str	r2, [r7, #12]
  return result;
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	fab2 f282 	clz	r2, r2
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	f002 021f 	and.w	r2, r2, #31
 800325a:	2101      	movs	r1, #1
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0b7      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003266:	4b95      	ldr	r3, [pc, #596]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4992      	ldr	r1, [pc, #584]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003278:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b8e      	ldr	r3, [pc, #568]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4a8d      	ldr	r2, [pc, #564]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003298:	4b88      	ldr	r3, [pc, #544]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f023 0203 	bic.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4985      	ldr	r1, [pc, #532]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032b6:	4b81      	ldr	r3, [pc, #516]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	497e      	ldr	r1, [pc, #504]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032d4:	4b79      	ldr	r3, [pc, #484]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4976      	ldr	r1, [pc, #472]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f023 0210 	bic.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	496f      	ldr	r1, [pc, #444]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	4967      	ldr	r1, [pc, #412]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800332e:	4b63      	ldr	r3, [pc, #396]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f023 0220 	bic.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4960      	ldr	r1, [pc, #384]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800334c:	4b5b      	ldr	r3, [pc, #364]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4958      	ldr	r1, [pc, #352]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4951      	ldr	r1, [pc, #324]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4949      	ldr	r1, [pc, #292]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033a6:	4b45      	ldr	r3, [pc, #276]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4942      	ldr	r1, [pc, #264]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	493a      	ldr	r1, [pc, #232]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	4933      	ldr	r1, [pc, #204]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	492b      	ldr	r1, [pc, #172]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4924      	ldr	r1, [pc, #144]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800343c:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	491c      	ldr	r1, [pc, #112]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	4915      	ldr	r1, [pc, #84]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	490d      	ldr	r1, [pc, #52]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	4906      	ldr	r1, [pc, #24]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00c      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	e002      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c8:	490b      	ldr	r1, [pc, #44]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	4904      	ldr	r1, [pc, #16]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3748      	adds	r7, #72	; 0x48
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e040      	b.n	8003590 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fac8 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fa44 	bl	80039c8 <UART_SetConfig>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e022      	b.n	8003590 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fc0c 	bl	8003d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fc93 	bl	8003eb4 <UART_CheckIdleState>
 800358e:	4603      	mov	r3, r0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	f040 8082 	bne.w	80036b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_UART_Transmit+0x26>
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e07a      	b.n	80036b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Transmit+0x38>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e073      	b.n	80036b8 <HAL_UART_Transmit+0x120>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2221      	movs	r2, #33	; 0x21
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fe6b 	bl	80012c0 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003604:	d108      	bne.n	8003618 <HAL_UART_Transmit+0x80>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e003      	b.n	8003620 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003628:	e02d      	b.n	8003686 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fc86 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e039      	b.n	80036b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003656:	b292      	uxth	r2, r2
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	3302      	adds	r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e008      	b.n	8003674 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	b292      	uxth	r2, r2
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1cb      	bne.n	800362a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fc52 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e005      	b.n	80036b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	f040 80bf 	bne.w	8003858 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_UART_Receive+0x26>
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0b7      	b.n	800385a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Receive+0x38>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0b0      	b.n	800385a <HAL_UART_Receive+0x19a>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2222      	movs	r2, #34	; 0x22
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003714:	f7fd fdd4 	bl	80012c0 <HAL_GetTick>
 8003718:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d10e      	bne.n	8003752 <HAL_UART_Receive+0x92>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_UART_Receive+0x88>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003746:	e02d      	b.n	80037a4 <HAL_UART_Receive+0xe4>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003750:	e028      	b.n	80037a4 <HAL_UART_Receive+0xe4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <HAL_UART_Receive+0xb6>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <HAL_UART_Receive+0xac>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800376a:	e01b      	b.n	80037a4 <HAL_UART_Receive+0xe4>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	227f      	movs	r2, #127	; 0x7f
 8003770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003774:	e016      	b.n	80037a4 <HAL_UART_Receive+0xe4>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800377e:	d10d      	bne.n	800379c <HAL_UART_Receive+0xdc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_UART_Receive+0xd2>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	227f      	movs	r2, #127	; 0x7f
 800378c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003790:	e008      	b.n	80037a4 <HAL_UART_Receive+0xe4>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	223f      	movs	r2, #63	; 0x3f
 8003796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800379a:	e003      	b.n	80037a4 <HAL_UART_Receive+0xe4>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Receive+0x108>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80037d8:	e033      	b.n	8003842 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2120      	movs	r1, #32
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fbae 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e032      	b.n	800385a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003800:	b29a      	uxth	r2, r3
 8003802:	8a7b      	ldrh	r3, [r7, #18]
 8003804:	4013      	ands	r3, r2
 8003806:	b29a      	uxth	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	3302      	adds	r3, #2
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e00d      	b.n	8003830 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800381a:	b29b      	uxth	r3, r3
 800381c:	b2da      	uxtb	r2, r3
 800381e:	8a7b      	ldrh	r3, [r7, #18]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4013      	ands	r3, r2
 8003824:	b2da      	uxtb	r2, r3
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3301      	adds	r3, #1
 800382e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1c5      	bne.n	80037da <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003878:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0210 	bic.w	r2, r2, #16
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d125      	bne.n	80038fc <HAL_UART_Abort+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038be:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d019      	beq.n	80038fc <HAL_UART_Abort+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	2200      	movs	r2, #0
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fecf 	bl	8001678 <HAL_DMA_Abort>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <HAL_UART_Abort+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd ff00 	bl	80016ea <HAL_DMA_GetError>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d105      	bne.n	80038fc <HAL_UART_Abort+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2210      	movs	r2, #16
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e04e      	b.n	800399a <HAL_UART_Abort+0x138>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d125      	bne.n	8003956 <HAL_UART_Abort+0xf4>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003918:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <HAL_UART_Abort+0xf4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fea2 	bl	8001678 <HAL_DMA_Abort>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <HAL_UART_Abort+0xf4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fed3 	bl	80016ea <HAL_DMA_GetError>
 8003944:	4603      	mov	r3, r0
 8003946:	2b20      	cmp	r3, #32
 8003948:	d105      	bne.n	8003956 <HAL_UART_Abort+0xf4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2210      	movs	r2, #16
 800394e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e021      	b.n	800399a <HAL_UART_Abort+0x138>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	220f      	movs	r2, #15
 800396c:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0208 	orr.w	r2, r2, #8
 800397c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ae:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b4:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4baa      	ldr	r3, [pc, #680]	; (8003c9c <UART_SetConfig+0x2d4>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a98      	ldr	r2, [pc, #608]	; (8003ca0 <UART_SetConfig+0x2d8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d121      	bne.n	8003a88 <UART_SetConfig+0xc0>
 8003a44:	4b97      	ldr	r3, [pc, #604]	; (8003ca4 <UART_SetConfig+0x2dc>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d817      	bhi.n	8003a80 <UART_SetConfig+0xb8>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <UART_SetConfig+0x90>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a75 	.word	0x08003a75
 8003a60:	08003a7b 	.word	0x08003a7b
 8003a64:	08003a6f 	.word	0x08003a6f
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e0b2      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e0af      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003a74:	2304      	movs	r3, #4
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e0ac      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e0a9      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	bf00      	nop
 8003a86:	e0a5      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a86      	ldr	r2, [pc, #536]	; (8003ca8 <UART_SetConfig+0x2e0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d123      	bne.n	8003ada <UART_SetConfig+0x112>
 8003a92:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <UART_SetConfig+0x2dc>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9e:	d012      	beq.n	8003ac6 <UART_SetConfig+0xfe>
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d802      	bhi.n	8003aac <UART_SetConfig+0xe4>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <UART_SetConfig+0xf2>
 8003aaa:	e012      	b.n	8003ad2 <UART_SetConfig+0x10a>
 8003aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab0:	d00c      	beq.n	8003acc <UART_SetConfig+0x104>
 8003ab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ab6:	d003      	beq.n	8003ac0 <UART_SetConfig+0xf8>
 8003ab8:	e00b      	b.n	8003ad2 <UART_SetConfig+0x10a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e089      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e086      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e083      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003acc:	2308      	movs	r3, #8
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e080      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	bf00      	nop
 8003ad8:	e07c      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a73      	ldr	r2, [pc, #460]	; (8003cac <UART_SetConfig+0x2e4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d123      	bne.n	8003b2c <UART_SetConfig+0x164>
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <UART_SetConfig+0x2dc>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af0:	d012      	beq.n	8003b18 <UART_SetConfig+0x150>
 8003af2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af6:	d802      	bhi.n	8003afe <UART_SetConfig+0x136>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <UART_SetConfig+0x144>
 8003afc:	e012      	b.n	8003b24 <UART_SetConfig+0x15c>
 8003afe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b02:	d00c      	beq.n	8003b1e <UART_SetConfig+0x156>
 8003b04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b08:	d003      	beq.n	8003b12 <UART_SetConfig+0x14a>
 8003b0a:	e00b      	b.n	8003b24 <UART_SetConfig+0x15c>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e060      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b12:	2302      	movs	r3, #2
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e05d      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e05a      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e057      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b24:	2310      	movs	r3, #16
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	bf00      	nop
 8003b2a:	e053      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5f      	ldr	r2, [pc, #380]	; (8003cb0 <UART_SetConfig+0x2e8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d123      	bne.n	8003b7e <UART_SetConfig+0x1b6>
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <UART_SetConfig+0x2dc>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b42:	d012      	beq.n	8003b6a <UART_SetConfig+0x1a2>
 8003b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b48:	d802      	bhi.n	8003b50 <UART_SetConfig+0x188>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <UART_SetConfig+0x196>
 8003b4e:	e012      	b.n	8003b76 <UART_SetConfig+0x1ae>
 8003b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b54:	d00c      	beq.n	8003b70 <UART_SetConfig+0x1a8>
 8003b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b5a:	d003      	beq.n	8003b64 <UART_SetConfig+0x19c>
 8003b5c:	e00b      	b.n	8003b76 <UART_SetConfig+0x1ae>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e037      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e034      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e031      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b70:	2308      	movs	r3, #8
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e02e      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b76:	2310      	movs	r3, #16
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	bf00      	nop
 8003b7c:	e02a      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d123      	bne.n	8003bd0 <UART_SetConfig+0x208>
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <UART_SetConfig+0x2dc>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b94:	d012      	beq.n	8003bbc <UART_SetConfig+0x1f4>
 8003b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9a:	d802      	bhi.n	8003ba2 <UART_SetConfig+0x1da>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <UART_SetConfig+0x1e8>
 8003ba0:	e012      	b.n	8003bc8 <UART_SetConfig+0x200>
 8003ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ba6:	d00c      	beq.n	8003bc2 <UART_SetConfig+0x1fa>
 8003ba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bac:	d003      	beq.n	8003bb6 <UART_SetConfig+0x1ee>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x200>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e00e      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e00b      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e008      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e005      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	bf00      	nop
 8003bce:	e001      	b.n	8003bd4 <UART_SetConfig+0x20c>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bdc:	d16e      	bne.n	8003cbc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d828      	bhi.n	8003c36 <UART_SetConfig+0x26e>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x224>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c37 	.word	0x08003c37
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7ff fa12 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61b8      	str	r0, [r7, #24]
        break;
 8003c16:	e013      	b.n	8003c40 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff fa30 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8003c1c:	61b8      	str	r0, [r7, #24]
        break;
 8003c1e:	e00f      	b.n	8003c40 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <UART_SetConfig+0x2f0>)
 8003c22:	61bb      	str	r3, [r7, #24]
        break;
 8003c24:	e00c      	b.n	8003c40 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7ff f991 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8003c2a:	61b8      	str	r0, [r7, #24]
        break;
 8003c2c:	e008      	b.n	8003c40 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e004      	b.n	8003c40 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8086 	beq.w	8003d54 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	005a      	lsls	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	441a      	add	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b0f      	cmp	r3, #15
 8003c64:	d916      	bls.n	8003c94 <UART_SetConfig+0x2cc>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d212      	bcs.n	8003c94 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f023 030f 	bic.w	r3, r3, #15
 8003c76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	89fa      	ldrh	r2, [r7, #14]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	e05f      	b.n	8003d54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	77bb      	strb	r3, [r7, #30]
 8003c98:	e05c      	b.n	8003d54 <UART_SetConfig+0x38c>
 8003c9a:	bf00      	nop
 8003c9c:	efff69f3 	.word	0xefff69f3
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40004400 	.word	0x40004400
 8003cac:	40004800 	.word	0x40004800
 8003cb0:	40004c00 	.word	0x40004c00
 8003cb4:	40005000 	.word	0x40005000
 8003cb8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d827      	bhi.n	8003d12 <UART_SetConfig+0x34a>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x300>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003cf5 	.word	0x08003cf5
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d13 	.word	0x08003d13
 8003ce0:	08003d13 	.word	0x08003d13
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7ff f9a4 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	61b8      	str	r0, [r7, #24]
        break;
 8003cf2:	e013      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7ff f9c2 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8003cf8:	61b8      	str	r0, [r7, #24]
        break;
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <UART_SetConfig+0x3a4>)
 8003cfe:	61bb      	str	r3, [r7, #24]
        break;
 8003d00:	e00c      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d02:	f7ff f923 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8003d06:	61b8      	str	r0, [r7, #24]
        break;
 8003d08:	e008      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e004      	b.n	8003d1c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77bb      	strb	r3, [r7, #30]
        break;
 8003d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	085a      	lsrs	r2, r3, #1
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d908      	bls.n	8003d50 <UART_SetConfig+0x388>
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d44:	d204      	bcs.n	8003d50 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	e001      	b.n	8003d54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d60:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	007a1200 	.word	0x007a1200

08003d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d10a      	bne.n	8003e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec4:	f7fd f9fc 	bl	80012c0 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10e      	bne.n	8003ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f82d 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e023      	b.n	8003f3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d10e      	bne.n	8003f22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f817 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e00d      	b.n	8003f3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f56:	e05e      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d05a      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fd f9ae 	bl	80012c0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11b      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e043      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02c      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d124      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fe4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e00f      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	429a      	cmp	r2, r3
 8004032:	d091      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <__errno>:
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <__errno+0x8>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000010 	.word	0x20000010

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4e0d      	ldr	r6, [pc, #52]	; (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004052:	1ba4      	subs	r4, r4, r6
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2500      	movs	r5, #0
 8004058:	42a5      	cmp	r5, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4e0b      	ldr	r6, [pc, #44]	; (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	; (8004090 <__libc_init_array+0x44>)
 8004060:	f000 fcdc 	bl	8004a1c <_init>
 8004064:	1ba4      	subs	r4, r4, r6
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2500      	movs	r5, #0
 800406a:	42a5      	cmp	r5, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004074:	4798      	blx	r3
 8004076:	3501      	adds	r5, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800407e:	4798      	blx	r3
 8004080:	3501      	adds	r5, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	08004dd8 	.word	0x08004dd8
 8004088:	08004dd8 	.word	0x08004dd8
 800408c:	08004dd8 	.word	0x08004dd8
 8004090:	08004ddc 	.word	0x08004ddc

08004094 <memset>:
 8004094:	4402      	add	r2, r0
 8004096:	4603      	mov	r3, r0
 8004098:	4293      	cmp	r3, r2
 800409a:	d100      	bne.n	800409e <memset+0xa>
 800409c:	4770      	bx	lr
 800409e:	f803 1b01 	strb.w	r1, [r3], #1
 80040a2:	e7f9      	b.n	8004098 <memset+0x4>

080040a4 <_strtol_l.isra.0>:
 80040a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	4680      	mov	r8, r0
 80040aa:	4689      	mov	r9, r1
 80040ac:	4692      	mov	sl, r2
 80040ae:	461e      	mov	r6, r3
 80040b0:	460f      	mov	r7, r1
 80040b2:	463d      	mov	r5, r7
 80040b4:	9808      	ldr	r0, [sp, #32]
 80040b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040ba:	f000 f8a5 	bl	8004208 <__locale_ctype_ptr_l>
 80040be:	4420      	add	r0, r4
 80040c0:	7843      	ldrb	r3, [r0, #1]
 80040c2:	f013 0308 	ands.w	r3, r3, #8
 80040c6:	d132      	bne.n	800412e <_strtol_l.isra.0+0x8a>
 80040c8:	2c2d      	cmp	r4, #45	; 0x2d
 80040ca:	d132      	bne.n	8004132 <_strtol_l.isra.0+0x8e>
 80040cc:	787c      	ldrb	r4, [r7, #1]
 80040ce:	1cbd      	adds	r5, r7, #2
 80040d0:	2201      	movs	r2, #1
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	d05d      	beq.n	8004192 <_strtol_l.isra.0+0xee>
 80040d6:	2e10      	cmp	r6, #16
 80040d8:	d109      	bne.n	80040ee <_strtol_l.isra.0+0x4a>
 80040da:	2c30      	cmp	r4, #48	; 0x30
 80040dc:	d107      	bne.n	80040ee <_strtol_l.isra.0+0x4a>
 80040de:	782b      	ldrb	r3, [r5, #0]
 80040e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80040e4:	2b58      	cmp	r3, #88	; 0x58
 80040e6:	d14f      	bne.n	8004188 <_strtol_l.isra.0+0xe4>
 80040e8:	786c      	ldrb	r4, [r5, #1]
 80040ea:	2610      	movs	r6, #16
 80040ec:	3502      	adds	r5, #2
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	bf14      	ite	ne
 80040f2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80040f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80040fa:	2700      	movs	r7, #0
 80040fc:	fbb1 fcf6 	udiv	ip, r1, r6
 8004100:	4638      	mov	r0, r7
 8004102:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004106:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800410a:	2b09      	cmp	r3, #9
 800410c:	d817      	bhi.n	800413e <_strtol_l.isra.0+0x9a>
 800410e:	461c      	mov	r4, r3
 8004110:	42a6      	cmp	r6, r4
 8004112:	dd23      	ble.n	800415c <_strtol_l.isra.0+0xb8>
 8004114:	1c7b      	adds	r3, r7, #1
 8004116:	d007      	beq.n	8004128 <_strtol_l.isra.0+0x84>
 8004118:	4584      	cmp	ip, r0
 800411a:	d31c      	bcc.n	8004156 <_strtol_l.isra.0+0xb2>
 800411c:	d101      	bne.n	8004122 <_strtol_l.isra.0+0x7e>
 800411e:	45a6      	cmp	lr, r4
 8004120:	db19      	blt.n	8004156 <_strtol_l.isra.0+0xb2>
 8004122:	fb00 4006 	mla	r0, r0, r6, r4
 8004126:	2701      	movs	r7, #1
 8004128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800412c:	e7eb      	b.n	8004106 <_strtol_l.isra.0+0x62>
 800412e:	462f      	mov	r7, r5
 8004130:	e7bf      	b.n	80040b2 <_strtol_l.isra.0+0xe>
 8004132:	2c2b      	cmp	r4, #43	; 0x2b
 8004134:	bf04      	itt	eq
 8004136:	1cbd      	addeq	r5, r7, #2
 8004138:	787c      	ldrbeq	r4, [r7, #1]
 800413a:	461a      	mov	r2, r3
 800413c:	e7c9      	b.n	80040d2 <_strtol_l.isra.0+0x2e>
 800413e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004142:	2b19      	cmp	r3, #25
 8004144:	d801      	bhi.n	800414a <_strtol_l.isra.0+0xa6>
 8004146:	3c37      	subs	r4, #55	; 0x37
 8004148:	e7e2      	b.n	8004110 <_strtol_l.isra.0+0x6c>
 800414a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800414e:	2b19      	cmp	r3, #25
 8004150:	d804      	bhi.n	800415c <_strtol_l.isra.0+0xb8>
 8004152:	3c57      	subs	r4, #87	; 0x57
 8004154:	e7dc      	b.n	8004110 <_strtol_l.isra.0+0x6c>
 8004156:	f04f 37ff 	mov.w	r7, #4294967295
 800415a:	e7e5      	b.n	8004128 <_strtol_l.isra.0+0x84>
 800415c:	1c7b      	adds	r3, r7, #1
 800415e:	d108      	bne.n	8004172 <_strtol_l.isra.0+0xce>
 8004160:	2322      	movs	r3, #34	; 0x22
 8004162:	f8c8 3000 	str.w	r3, [r8]
 8004166:	4608      	mov	r0, r1
 8004168:	f1ba 0f00 	cmp.w	sl, #0
 800416c:	d107      	bne.n	800417e <_strtol_l.isra.0+0xda>
 800416e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004172:	b102      	cbz	r2, 8004176 <_strtol_l.isra.0+0xd2>
 8004174:	4240      	negs	r0, r0
 8004176:	f1ba 0f00 	cmp.w	sl, #0
 800417a:	d0f8      	beq.n	800416e <_strtol_l.isra.0+0xca>
 800417c:	b10f      	cbz	r7, 8004182 <_strtol_l.isra.0+0xde>
 800417e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004182:	f8ca 9000 	str.w	r9, [sl]
 8004186:	e7f2      	b.n	800416e <_strtol_l.isra.0+0xca>
 8004188:	2430      	movs	r4, #48	; 0x30
 800418a:	2e00      	cmp	r6, #0
 800418c:	d1af      	bne.n	80040ee <_strtol_l.isra.0+0x4a>
 800418e:	2608      	movs	r6, #8
 8004190:	e7ad      	b.n	80040ee <_strtol_l.isra.0+0x4a>
 8004192:	2c30      	cmp	r4, #48	; 0x30
 8004194:	d0a3      	beq.n	80040de <_strtol_l.isra.0+0x3a>
 8004196:	260a      	movs	r6, #10
 8004198:	e7a9      	b.n	80040ee <_strtol_l.isra.0+0x4a>
	...

0800419c <strtol>:
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <strtol+0x24>)
 800419e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041a0:	681c      	ldr	r4, [r3, #0]
 80041a2:	4d08      	ldr	r5, [pc, #32]	; (80041c4 <strtol+0x28>)
 80041a4:	6a23      	ldr	r3, [r4, #32]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf08      	it	eq
 80041aa:	462b      	moveq	r3, r5
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	460a      	mov	r2, r1
 80041b2:	4601      	mov	r1, r0
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7ff ff75 	bl	80040a4 <_strtol_l.isra.0>
 80041ba:	b003      	add	sp, #12
 80041bc:	bd30      	pop	{r4, r5, pc}
 80041be:	bf00      	nop
 80041c0:	20000010 	.word	0x20000010
 80041c4:	20000074 	.word	0x20000074

080041c8 <_vsiprintf_r>:
 80041c8:	b500      	push	{lr}
 80041ca:	b09b      	sub	sp, #108	; 0x6c
 80041cc:	9100      	str	r1, [sp, #0]
 80041ce:	9104      	str	r1, [sp, #16]
 80041d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041d4:	9105      	str	r1, [sp, #20]
 80041d6:	9102      	str	r1, [sp, #8]
 80041d8:	4905      	ldr	r1, [pc, #20]	; (80041f0 <_vsiprintf_r+0x28>)
 80041da:	9103      	str	r1, [sp, #12]
 80041dc:	4669      	mov	r1, sp
 80041de:	f000 f883 	bl	80042e8 <_svfiprintf_r>
 80041e2:	9b00      	ldr	r3, [sp, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	b01b      	add	sp, #108	; 0x6c
 80041ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ee:	bf00      	nop
 80041f0:	ffff0208 	.word	0xffff0208

080041f4 <vsiprintf>:
 80041f4:	4613      	mov	r3, r2
 80041f6:	460a      	mov	r2, r1
 80041f8:	4601      	mov	r1, r0
 80041fa:	4802      	ldr	r0, [pc, #8]	; (8004204 <vsiprintf+0x10>)
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f7ff bfe3 	b.w	80041c8 <_vsiprintf_r>
 8004202:	bf00      	nop
 8004204:	20000010 	.word	0x20000010

08004208 <__locale_ctype_ptr_l>:
 8004208:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800420c:	4770      	bx	lr

0800420e <__ascii_mbtowc>:
 800420e:	b082      	sub	sp, #8
 8004210:	b901      	cbnz	r1, 8004214 <__ascii_mbtowc+0x6>
 8004212:	a901      	add	r1, sp, #4
 8004214:	b142      	cbz	r2, 8004228 <__ascii_mbtowc+0x1a>
 8004216:	b14b      	cbz	r3, 800422c <__ascii_mbtowc+0x1e>
 8004218:	7813      	ldrb	r3, [r2, #0]
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	1c10      	adds	r0, r2, #0
 8004220:	bf18      	it	ne
 8004222:	2001      	movne	r0, #1
 8004224:	b002      	add	sp, #8
 8004226:	4770      	bx	lr
 8004228:	4610      	mov	r0, r2
 800422a:	e7fb      	b.n	8004224 <__ascii_mbtowc+0x16>
 800422c:	f06f 0001 	mvn.w	r0, #1
 8004230:	e7f8      	b.n	8004224 <__ascii_mbtowc+0x16>

08004232 <__ssputs_r>:
 8004232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004236:	688e      	ldr	r6, [r1, #8]
 8004238:	429e      	cmp	r6, r3
 800423a:	4682      	mov	sl, r0
 800423c:	460c      	mov	r4, r1
 800423e:	4690      	mov	r8, r2
 8004240:	4699      	mov	r9, r3
 8004242:	d837      	bhi.n	80042b4 <__ssputs_r+0x82>
 8004244:	898a      	ldrh	r2, [r1, #12]
 8004246:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800424a:	d031      	beq.n	80042b0 <__ssputs_r+0x7e>
 800424c:	6825      	ldr	r5, [r4, #0]
 800424e:	6909      	ldr	r1, [r1, #16]
 8004250:	1a6f      	subs	r7, r5, r1
 8004252:	6965      	ldr	r5, [r4, #20]
 8004254:	2302      	movs	r3, #2
 8004256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800425a:	fb95 f5f3 	sdiv	r5, r5, r3
 800425e:	f109 0301 	add.w	r3, r9, #1
 8004262:	443b      	add	r3, r7
 8004264:	429d      	cmp	r5, r3
 8004266:	bf38      	it	cc
 8004268:	461d      	movcc	r5, r3
 800426a:	0553      	lsls	r3, r2, #21
 800426c:	d530      	bpl.n	80042d0 <__ssputs_r+0x9e>
 800426e:	4629      	mov	r1, r5
 8004270:	f000 fb3a 	bl	80048e8 <_malloc_r>
 8004274:	4606      	mov	r6, r0
 8004276:	b950      	cbnz	r0, 800428e <__ssputs_r+0x5c>
 8004278:	230c      	movs	r3, #12
 800427a:	f8ca 3000 	str.w	r3, [sl]
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004284:	81a3      	strh	r3, [r4, #12]
 8004286:	f04f 30ff 	mov.w	r0, #4294967295
 800428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428e:	463a      	mov	r2, r7
 8004290:	6921      	ldr	r1, [r4, #16]
 8004292:	f000 fab6 	bl	8004802 <memcpy>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	6126      	str	r6, [r4, #16]
 80042a4:	6165      	str	r5, [r4, #20]
 80042a6:	443e      	add	r6, r7
 80042a8:	1bed      	subs	r5, r5, r7
 80042aa:	6026      	str	r6, [r4, #0]
 80042ac:	60a5      	str	r5, [r4, #8]
 80042ae:	464e      	mov	r6, r9
 80042b0:	454e      	cmp	r6, r9
 80042b2:	d900      	bls.n	80042b6 <__ssputs_r+0x84>
 80042b4:	464e      	mov	r6, r9
 80042b6:	4632      	mov	r2, r6
 80042b8:	4641      	mov	r1, r8
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	f000 faac 	bl	8004818 <memmove>
 80042c0:	68a3      	ldr	r3, [r4, #8]
 80042c2:	1b9b      	subs	r3, r3, r6
 80042c4:	60a3      	str	r3, [r4, #8]
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	441e      	add	r6, r3
 80042ca:	6026      	str	r6, [r4, #0]
 80042cc:	2000      	movs	r0, #0
 80042ce:	e7dc      	b.n	800428a <__ssputs_r+0x58>
 80042d0:	462a      	mov	r2, r5
 80042d2:	f000 fb63 	bl	800499c <_realloc_r>
 80042d6:	4606      	mov	r6, r0
 80042d8:	2800      	cmp	r0, #0
 80042da:	d1e2      	bne.n	80042a2 <__ssputs_r+0x70>
 80042dc:	6921      	ldr	r1, [r4, #16]
 80042de:	4650      	mov	r0, sl
 80042e0:	f000 fab4 	bl	800484c <_free_r>
 80042e4:	e7c8      	b.n	8004278 <__ssputs_r+0x46>
	...

080042e8 <_svfiprintf_r>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	461d      	mov	r5, r3
 80042ee:	898b      	ldrh	r3, [r1, #12]
 80042f0:	061f      	lsls	r7, r3, #24
 80042f2:	b09d      	sub	sp, #116	; 0x74
 80042f4:	4680      	mov	r8, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	4616      	mov	r6, r2
 80042fa:	d50f      	bpl.n	800431c <_svfiprintf_r+0x34>
 80042fc:	690b      	ldr	r3, [r1, #16]
 80042fe:	b96b      	cbnz	r3, 800431c <_svfiprintf_r+0x34>
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	f000 faf1 	bl	80048e8 <_malloc_r>
 8004306:	6020      	str	r0, [r4, #0]
 8004308:	6120      	str	r0, [r4, #16]
 800430a:	b928      	cbnz	r0, 8004318 <_svfiprintf_r+0x30>
 800430c:	230c      	movs	r3, #12
 800430e:	f8c8 3000 	str.w	r3, [r8]
 8004312:	f04f 30ff 	mov.w	r0, #4294967295
 8004316:	e0c8      	b.n	80044aa <_svfiprintf_r+0x1c2>
 8004318:	2340      	movs	r3, #64	; 0x40
 800431a:	6163      	str	r3, [r4, #20]
 800431c:	2300      	movs	r3, #0
 800431e:	9309      	str	r3, [sp, #36]	; 0x24
 8004320:	2320      	movs	r3, #32
 8004322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004326:	2330      	movs	r3, #48	; 0x30
 8004328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800432c:	9503      	str	r5, [sp, #12]
 800432e:	f04f 0b01 	mov.w	fp, #1
 8004332:	4637      	mov	r7, r6
 8004334:	463d      	mov	r5, r7
 8004336:	f815 3b01 	ldrb.w	r3, [r5], #1
 800433a:	b10b      	cbz	r3, 8004340 <_svfiprintf_r+0x58>
 800433c:	2b25      	cmp	r3, #37	; 0x25
 800433e:	d13e      	bne.n	80043be <_svfiprintf_r+0xd6>
 8004340:	ebb7 0a06 	subs.w	sl, r7, r6
 8004344:	d00b      	beq.n	800435e <_svfiprintf_r+0x76>
 8004346:	4653      	mov	r3, sl
 8004348:	4632      	mov	r2, r6
 800434a:	4621      	mov	r1, r4
 800434c:	4640      	mov	r0, r8
 800434e:	f7ff ff70 	bl	8004232 <__ssputs_r>
 8004352:	3001      	adds	r0, #1
 8004354:	f000 80a4 	beq.w	80044a0 <_svfiprintf_r+0x1b8>
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	4453      	add	r3, sl
 800435c:	9309      	str	r3, [sp, #36]	; 0x24
 800435e:	783b      	ldrb	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 809d 	beq.w	80044a0 <_svfiprintf_r+0x1b8>
 8004366:	2300      	movs	r3, #0
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004370:	9304      	str	r3, [sp, #16]
 8004372:	9307      	str	r3, [sp, #28]
 8004374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004378:	931a      	str	r3, [sp, #104]	; 0x68
 800437a:	462f      	mov	r7, r5
 800437c:	2205      	movs	r2, #5
 800437e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004382:	4850      	ldr	r0, [pc, #320]	; (80044c4 <_svfiprintf_r+0x1dc>)
 8004384:	f7fb ff34 	bl	80001f0 <memchr>
 8004388:	9b04      	ldr	r3, [sp, #16]
 800438a:	b9d0      	cbnz	r0, 80043c2 <_svfiprintf_r+0xda>
 800438c:	06d9      	lsls	r1, r3, #27
 800438e:	bf44      	itt	mi
 8004390:	2220      	movmi	r2, #32
 8004392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004396:	071a      	lsls	r2, r3, #28
 8004398:	bf44      	itt	mi
 800439a:	222b      	movmi	r2, #43	; 0x2b
 800439c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043a0:	782a      	ldrb	r2, [r5, #0]
 80043a2:	2a2a      	cmp	r2, #42	; 0x2a
 80043a4:	d015      	beq.n	80043d2 <_svfiprintf_r+0xea>
 80043a6:	9a07      	ldr	r2, [sp, #28]
 80043a8:	462f      	mov	r7, r5
 80043aa:	2000      	movs	r0, #0
 80043ac:	250a      	movs	r5, #10
 80043ae:	4639      	mov	r1, r7
 80043b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043b4:	3b30      	subs	r3, #48	; 0x30
 80043b6:	2b09      	cmp	r3, #9
 80043b8:	d94d      	bls.n	8004456 <_svfiprintf_r+0x16e>
 80043ba:	b1b8      	cbz	r0, 80043ec <_svfiprintf_r+0x104>
 80043bc:	e00f      	b.n	80043de <_svfiprintf_r+0xf6>
 80043be:	462f      	mov	r7, r5
 80043c0:	e7b8      	b.n	8004334 <_svfiprintf_r+0x4c>
 80043c2:	4a40      	ldr	r2, [pc, #256]	; (80044c4 <_svfiprintf_r+0x1dc>)
 80043c4:	1a80      	subs	r0, r0, r2
 80043c6:	fa0b f000 	lsl.w	r0, fp, r0
 80043ca:	4318      	orrs	r0, r3
 80043cc:	9004      	str	r0, [sp, #16]
 80043ce:	463d      	mov	r5, r7
 80043d0:	e7d3      	b.n	800437a <_svfiprintf_r+0x92>
 80043d2:	9a03      	ldr	r2, [sp, #12]
 80043d4:	1d11      	adds	r1, r2, #4
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	9103      	str	r1, [sp, #12]
 80043da:	2a00      	cmp	r2, #0
 80043dc:	db01      	blt.n	80043e2 <_svfiprintf_r+0xfa>
 80043de:	9207      	str	r2, [sp, #28]
 80043e0:	e004      	b.n	80043ec <_svfiprintf_r+0x104>
 80043e2:	4252      	negs	r2, r2
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	9207      	str	r2, [sp, #28]
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	783b      	ldrb	r3, [r7, #0]
 80043ee:	2b2e      	cmp	r3, #46	; 0x2e
 80043f0:	d10c      	bne.n	800440c <_svfiprintf_r+0x124>
 80043f2:	787b      	ldrb	r3, [r7, #1]
 80043f4:	2b2a      	cmp	r3, #42	; 0x2a
 80043f6:	d133      	bne.n	8004460 <_svfiprintf_r+0x178>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	1d1a      	adds	r2, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9203      	str	r2, [sp, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	bfb8      	it	lt
 8004404:	f04f 33ff 	movlt.w	r3, #4294967295
 8004408:	3702      	adds	r7, #2
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	4d2e      	ldr	r5, [pc, #184]	; (80044c8 <_svfiprintf_r+0x1e0>)
 800440e:	7839      	ldrb	r1, [r7, #0]
 8004410:	2203      	movs	r2, #3
 8004412:	4628      	mov	r0, r5
 8004414:	f7fb feec 	bl	80001f0 <memchr>
 8004418:	b138      	cbz	r0, 800442a <_svfiprintf_r+0x142>
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	1b40      	subs	r0, r0, r5
 800441e:	fa03 f000 	lsl.w	r0, r3, r0
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	4303      	orrs	r3, r0
 8004426:	3701      	adds	r7, #1
 8004428:	9304      	str	r3, [sp, #16]
 800442a:	7839      	ldrb	r1, [r7, #0]
 800442c:	4827      	ldr	r0, [pc, #156]	; (80044cc <_svfiprintf_r+0x1e4>)
 800442e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004432:	2206      	movs	r2, #6
 8004434:	1c7e      	adds	r6, r7, #1
 8004436:	f7fb fedb 	bl	80001f0 <memchr>
 800443a:	2800      	cmp	r0, #0
 800443c:	d038      	beq.n	80044b0 <_svfiprintf_r+0x1c8>
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <_svfiprintf_r+0x1e8>)
 8004440:	bb13      	cbnz	r3, 8004488 <_svfiprintf_r+0x1a0>
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	3307      	adds	r3, #7
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	3308      	adds	r3, #8
 800444c:	9303      	str	r3, [sp, #12]
 800444e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004450:	444b      	add	r3, r9
 8004452:	9309      	str	r3, [sp, #36]	; 0x24
 8004454:	e76d      	b.n	8004332 <_svfiprintf_r+0x4a>
 8004456:	fb05 3202 	mla	r2, r5, r2, r3
 800445a:	2001      	movs	r0, #1
 800445c:	460f      	mov	r7, r1
 800445e:	e7a6      	b.n	80043ae <_svfiprintf_r+0xc6>
 8004460:	2300      	movs	r3, #0
 8004462:	3701      	adds	r7, #1
 8004464:	9305      	str	r3, [sp, #20]
 8004466:	4619      	mov	r1, r3
 8004468:	250a      	movs	r5, #10
 800446a:	4638      	mov	r0, r7
 800446c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004470:	3a30      	subs	r2, #48	; 0x30
 8004472:	2a09      	cmp	r2, #9
 8004474:	d903      	bls.n	800447e <_svfiprintf_r+0x196>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0c8      	beq.n	800440c <_svfiprintf_r+0x124>
 800447a:	9105      	str	r1, [sp, #20]
 800447c:	e7c6      	b.n	800440c <_svfiprintf_r+0x124>
 800447e:	fb05 2101 	mla	r1, r5, r1, r2
 8004482:	2301      	movs	r3, #1
 8004484:	4607      	mov	r7, r0
 8004486:	e7f0      	b.n	800446a <_svfiprintf_r+0x182>
 8004488:	ab03      	add	r3, sp, #12
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4622      	mov	r2, r4
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <_svfiprintf_r+0x1ec>)
 8004490:	a904      	add	r1, sp, #16
 8004492:	4640      	mov	r0, r8
 8004494:	f3af 8000 	nop.w
 8004498:	f1b0 3fff 	cmp.w	r0, #4294967295
 800449c:	4681      	mov	r9, r0
 800449e:	d1d6      	bne.n	800444e <_svfiprintf_r+0x166>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	065b      	lsls	r3, r3, #25
 80044a4:	f53f af35 	bmi.w	8004312 <_svfiprintf_r+0x2a>
 80044a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044aa:	b01d      	add	sp, #116	; 0x74
 80044ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b0:	ab03      	add	r3, sp, #12
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4622      	mov	r2, r4
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <_svfiprintf_r+0x1ec>)
 80044b8:	a904      	add	r1, sp, #16
 80044ba:	4640      	mov	r0, r8
 80044bc:	f000 f882 	bl	80045c4 <_printf_i>
 80044c0:	e7ea      	b.n	8004498 <_svfiprintf_r+0x1b0>
 80044c2:	bf00      	nop
 80044c4:	08004ca2 	.word	0x08004ca2
 80044c8:	08004ca8 	.word	0x08004ca8
 80044cc:	08004cac 	.word	0x08004cac
 80044d0:	00000000 	.word	0x00000000
 80044d4:	08004233 	.word	0x08004233

080044d8 <_printf_common>:
 80044d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	4691      	mov	r9, r2
 80044de:	461f      	mov	r7, r3
 80044e0:	688a      	ldr	r2, [r1, #8]
 80044e2:	690b      	ldr	r3, [r1, #16]
 80044e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bfb8      	it	lt
 80044ec:	4613      	movlt	r3, r2
 80044ee:	f8c9 3000 	str.w	r3, [r9]
 80044f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044f6:	4606      	mov	r6, r0
 80044f8:	460c      	mov	r4, r1
 80044fa:	b112      	cbz	r2, 8004502 <_printf_common+0x2a>
 80044fc:	3301      	adds	r3, #1
 80044fe:	f8c9 3000 	str.w	r3, [r9]
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	0699      	lsls	r1, r3, #26
 8004506:	bf42      	ittt	mi
 8004508:	f8d9 3000 	ldrmi.w	r3, [r9]
 800450c:	3302      	addmi	r3, #2
 800450e:	f8c9 3000 	strmi.w	r3, [r9]
 8004512:	6825      	ldr	r5, [r4, #0]
 8004514:	f015 0506 	ands.w	r5, r5, #6
 8004518:	d107      	bne.n	800452a <_printf_common+0x52>
 800451a:	f104 0a19 	add.w	sl, r4, #25
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	f8d9 2000 	ldr.w	r2, [r9]
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	42ab      	cmp	r3, r5
 8004528:	dc28      	bgt.n	800457c <_printf_common+0xa4>
 800452a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	3300      	adds	r3, #0
 8004532:	bf18      	it	ne
 8004534:	2301      	movne	r3, #1
 8004536:	0692      	lsls	r2, r2, #26
 8004538:	d42d      	bmi.n	8004596 <_printf_common+0xbe>
 800453a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800453e:	4639      	mov	r1, r7
 8004540:	4630      	mov	r0, r6
 8004542:	47c0      	blx	r8
 8004544:	3001      	adds	r0, #1
 8004546:	d020      	beq.n	800458a <_printf_common+0xb2>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	68e5      	ldr	r5, [r4, #12]
 800454c:	f8d9 2000 	ldr.w	r2, [r9]
 8004550:	f003 0306 	and.w	r3, r3, #6
 8004554:	2b04      	cmp	r3, #4
 8004556:	bf08      	it	eq
 8004558:	1aad      	subeq	r5, r5, r2
 800455a:	68a3      	ldr	r3, [r4, #8]
 800455c:	6922      	ldr	r2, [r4, #16]
 800455e:	bf0c      	ite	eq
 8004560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004564:	2500      	movne	r5, #0
 8004566:	4293      	cmp	r3, r2
 8004568:	bfc4      	itt	gt
 800456a:	1a9b      	subgt	r3, r3, r2
 800456c:	18ed      	addgt	r5, r5, r3
 800456e:	f04f 0900 	mov.w	r9, #0
 8004572:	341a      	adds	r4, #26
 8004574:	454d      	cmp	r5, r9
 8004576:	d11a      	bne.n	80045ae <_printf_common+0xd6>
 8004578:	2000      	movs	r0, #0
 800457a:	e008      	b.n	800458e <_printf_common+0xb6>
 800457c:	2301      	movs	r3, #1
 800457e:	4652      	mov	r2, sl
 8004580:	4639      	mov	r1, r7
 8004582:	4630      	mov	r0, r6
 8004584:	47c0      	blx	r8
 8004586:	3001      	adds	r0, #1
 8004588:	d103      	bne.n	8004592 <_printf_common+0xba>
 800458a:	f04f 30ff 	mov.w	r0, #4294967295
 800458e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004592:	3501      	adds	r5, #1
 8004594:	e7c3      	b.n	800451e <_printf_common+0x46>
 8004596:	18e1      	adds	r1, r4, r3
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	2030      	movs	r0, #48	; 0x30
 800459c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045a0:	4422      	add	r2, r4
 80045a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045aa:	3302      	adds	r3, #2
 80045ac:	e7c5      	b.n	800453a <_printf_common+0x62>
 80045ae:	2301      	movs	r3, #1
 80045b0:	4622      	mov	r2, r4
 80045b2:	4639      	mov	r1, r7
 80045b4:	4630      	mov	r0, r6
 80045b6:	47c0      	blx	r8
 80045b8:	3001      	adds	r0, #1
 80045ba:	d0e6      	beq.n	800458a <_printf_common+0xb2>
 80045bc:	f109 0901 	add.w	r9, r9, #1
 80045c0:	e7d8      	b.n	8004574 <_printf_common+0x9c>
	...

080045c4 <_printf_i>:
 80045c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045cc:	460c      	mov	r4, r1
 80045ce:	7e09      	ldrb	r1, [r1, #24]
 80045d0:	b085      	sub	sp, #20
 80045d2:	296e      	cmp	r1, #110	; 0x6e
 80045d4:	4617      	mov	r7, r2
 80045d6:	4606      	mov	r6, r0
 80045d8:	4698      	mov	r8, r3
 80045da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045dc:	f000 80b3 	beq.w	8004746 <_printf_i+0x182>
 80045e0:	d822      	bhi.n	8004628 <_printf_i+0x64>
 80045e2:	2963      	cmp	r1, #99	; 0x63
 80045e4:	d036      	beq.n	8004654 <_printf_i+0x90>
 80045e6:	d80a      	bhi.n	80045fe <_printf_i+0x3a>
 80045e8:	2900      	cmp	r1, #0
 80045ea:	f000 80b9 	beq.w	8004760 <_printf_i+0x19c>
 80045ee:	2958      	cmp	r1, #88	; 0x58
 80045f0:	f000 8083 	beq.w	80046fa <_printf_i+0x136>
 80045f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045fc:	e032      	b.n	8004664 <_printf_i+0xa0>
 80045fe:	2964      	cmp	r1, #100	; 0x64
 8004600:	d001      	beq.n	8004606 <_printf_i+0x42>
 8004602:	2969      	cmp	r1, #105	; 0x69
 8004604:	d1f6      	bne.n	80045f4 <_printf_i+0x30>
 8004606:	6820      	ldr	r0, [r4, #0]
 8004608:	6813      	ldr	r3, [r2, #0]
 800460a:	0605      	lsls	r5, r0, #24
 800460c:	f103 0104 	add.w	r1, r3, #4
 8004610:	d52a      	bpl.n	8004668 <_printf_i+0xa4>
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da03      	bge.n	8004622 <_printf_i+0x5e>
 800461a:	222d      	movs	r2, #45	; 0x2d
 800461c:	425b      	negs	r3, r3
 800461e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004622:	486f      	ldr	r0, [pc, #444]	; (80047e0 <_printf_i+0x21c>)
 8004624:	220a      	movs	r2, #10
 8004626:	e039      	b.n	800469c <_printf_i+0xd8>
 8004628:	2973      	cmp	r1, #115	; 0x73
 800462a:	f000 809d 	beq.w	8004768 <_printf_i+0x1a4>
 800462e:	d808      	bhi.n	8004642 <_printf_i+0x7e>
 8004630:	296f      	cmp	r1, #111	; 0x6f
 8004632:	d020      	beq.n	8004676 <_printf_i+0xb2>
 8004634:	2970      	cmp	r1, #112	; 0x70
 8004636:	d1dd      	bne.n	80045f4 <_printf_i+0x30>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	f043 0320 	orr.w	r3, r3, #32
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	e003      	b.n	800464a <_printf_i+0x86>
 8004642:	2975      	cmp	r1, #117	; 0x75
 8004644:	d017      	beq.n	8004676 <_printf_i+0xb2>
 8004646:	2978      	cmp	r1, #120	; 0x78
 8004648:	d1d4      	bne.n	80045f4 <_printf_i+0x30>
 800464a:	2378      	movs	r3, #120	; 0x78
 800464c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004650:	4864      	ldr	r0, [pc, #400]	; (80047e4 <_printf_i+0x220>)
 8004652:	e055      	b.n	8004700 <_printf_i+0x13c>
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	1d19      	adds	r1, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6011      	str	r1, [r2, #0]
 800465c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004664:	2301      	movs	r3, #1
 8004666:	e08c      	b.n	8004782 <_printf_i+0x1be>
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6011      	str	r1, [r2, #0]
 800466c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004670:	bf18      	it	ne
 8004672:	b21b      	sxthne	r3, r3
 8004674:	e7cf      	b.n	8004616 <_printf_i+0x52>
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	6825      	ldr	r5, [r4, #0]
 800467a:	1d18      	adds	r0, r3, #4
 800467c:	6010      	str	r0, [r2, #0]
 800467e:	0628      	lsls	r0, r5, #24
 8004680:	d501      	bpl.n	8004686 <_printf_i+0xc2>
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	e002      	b.n	800468c <_printf_i+0xc8>
 8004686:	0668      	lsls	r0, r5, #25
 8004688:	d5fb      	bpl.n	8004682 <_printf_i+0xbe>
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	4854      	ldr	r0, [pc, #336]	; (80047e0 <_printf_i+0x21c>)
 800468e:	296f      	cmp	r1, #111	; 0x6f
 8004690:	bf14      	ite	ne
 8004692:	220a      	movne	r2, #10
 8004694:	2208      	moveq	r2, #8
 8004696:	2100      	movs	r1, #0
 8004698:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469c:	6865      	ldr	r5, [r4, #4]
 800469e:	60a5      	str	r5, [r4, #8]
 80046a0:	2d00      	cmp	r5, #0
 80046a2:	f2c0 8095 	blt.w	80047d0 <_printf_i+0x20c>
 80046a6:	6821      	ldr	r1, [r4, #0]
 80046a8:	f021 0104 	bic.w	r1, r1, #4
 80046ac:	6021      	str	r1, [r4, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d13d      	bne.n	800472e <_printf_i+0x16a>
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	f040 808e 	bne.w	80047d4 <_printf_i+0x210>
 80046b8:	4665      	mov	r5, ip
 80046ba:	2a08      	cmp	r2, #8
 80046bc:	d10b      	bne.n	80046d6 <_printf_i+0x112>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	07db      	lsls	r3, r3, #31
 80046c2:	d508      	bpl.n	80046d6 <_printf_i+0x112>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	bfde      	ittt	le
 80046cc:	2330      	movle	r3, #48	; 0x30
 80046ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046d6:	ebac 0305 	sub.w	r3, ip, r5
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	f8cd 8000 	str.w	r8, [sp]
 80046e0:	463b      	mov	r3, r7
 80046e2:	aa03      	add	r2, sp, #12
 80046e4:	4621      	mov	r1, r4
 80046e6:	4630      	mov	r0, r6
 80046e8:	f7ff fef6 	bl	80044d8 <_printf_common>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d14d      	bne.n	800478c <_printf_i+0x1c8>
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	b005      	add	sp, #20
 80046f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046fa:	4839      	ldr	r0, [pc, #228]	; (80047e0 <_printf_i+0x21c>)
 80046fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	6821      	ldr	r1, [r4, #0]
 8004704:	1d1d      	adds	r5, r3, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6015      	str	r5, [r2, #0]
 800470a:	060a      	lsls	r2, r1, #24
 800470c:	d50b      	bpl.n	8004726 <_printf_i+0x162>
 800470e:	07ca      	lsls	r2, r1, #31
 8004710:	bf44      	itt	mi
 8004712:	f041 0120 	orrmi.w	r1, r1, #32
 8004716:	6021      	strmi	r1, [r4, #0]
 8004718:	b91b      	cbnz	r3, 8004722 <_printf_i+0x15e>
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	f022 0220 	bic.w	r2, r2, #32
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	2210      	movs	r2, #16
 8004724:	e7b7      	b.n	8004696 <_printf_i+0xd2>
 8004726:	064d      	lsls	r5, r1, #25
 8004728:	bf48      	it	mi
 800472a:	b29b      	uxthmi	r3, r3
 800472c:	e7ef      	b.n	800470e <_printf_i+0x14a>
 800472e:	4665      	mov	r5, ip
 8004730:	fbb3 f1f2 	udiv	r1, r3, r2
 8004734:	fb02 3311 	mls	r3, r2, r1, r3
 8004738:	5cc3      	ldrb	r3, [r0, r3]
 800473a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800473e:	460b      	mov	r3, r1
 8004740:	2900      	cmp	r1, #0
 8004742:	d1f5      	bne.n	8004730 <_printf_i+0x16c>
 8004744:	e7b9      	b.n	80046ba <_printf_i+0xf6>
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	6825      	ldr	r5, [r4, #0]
 800474a:	6961      	ldr	r1, [r4, #20]
 800474c:	1d18      	adds	r0, r3, #4
 800474e:	6010      	str	r0, [r2, #0]
 8004750:	0628      	lsls	r0, r5, #24
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	d501      	bpl.n	800475a <_printf_i+0x196>
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	e002      	b.n	8004760 <_printf_i+0x19c>
 800475a:	066a      	lsls	r2, r5, #25
 800475c:	d5fb      	bpl.n	8004756 <_printf_i+0x192>
 800475e:	8019      	strh	r1, [r3, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	4665      	mov	r5, ip
 8004766:	e7b9      	b.n	80046dc <_printf_i+0x118>
 8004768:	6813      	ldr	r3, [r2, #0]
 800476a:	1d19      	adds	r1, r3, #4
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	681d      	ldr	r5, [r3, #0]
 8004770:	6862      	ldr	r2, [r4, #4]
 8004772:	2100      	movs	r1, #0
 8004774:	4628      	mov	r0, r5
 8004776:	f7fb fd3b 	bl	80001f0 <memchr>
 800477a:	b108      	cbz	r0, 8004780 <_printf_i+0x1bc>
 800477c:	1b40      	subs	r0, r0, r5
 800477e:	6060      	str	r0, [r4, #4]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	2300      	movs	r3, #0
 8004786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800478a:	e7a7      	b.n	80046dc <_printf_i+0x118>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	462a      	mov	r2, r5
 8004790:	4639      	mov	r1, r7
 8004792:	4630      	mov	r0, r6
 8004794:	47c0      	blx	r8
 8004796:	3001      	adds	r0, #1
 8004798:	d0aa      	beq.n	80046f0 <_printf_i+0x12c>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	079b      	lsls	r3, r3, #30
 800479e:	d413      	bmi.n	80047c8 <_printf_i+0x204>
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	4298      	cmp	r0, r3
 80047a6:	bfb8      	it	lt
 80047a8:	4618      	movlt	r0, r3
 80047aa:	e7a3      	b.n	80046f4 <_printf_i+0x130>
 80047ac:	2301      	movs	r3, #1
 80047ae:	464a      	mov	r2, r9
 80047b0:	4639      	mov	r1, r7
 80047b2:	4630      	mov	r0, r6
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d09a      	beq.n	80046f0 <_printf_i+0x12c>
 80047ba:	3501      	adds	r5, #1
 80047bc:	68e3      	ldr	r3, [r4, #12]
 80047be:	9a03      	ldr	r2, [sp, #12]
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	42ab      	cmp	r3, r5
 80047c4:	dcf2      	bgt.n	80047ac <_printf_i+0x1e8>
 80047c6:	e7eb      	b.n	80047a0 <_printf_i+0x1dc>
 80047c8:	2500      	movs	r5, #0
 80047ca:	f104 0919 	add.w	r9, r4, #25
 80047ce:	e7f5      	b.n	80047bc <_printf_i+0x1f8>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ac      	bne.n	800472e <_printf_i+0x16a>
 80047d4:	7803      	ldrb	r3, [r0, #0]
 80047d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047de:	e76c      	b.n	80046ba <_printf_i+0xf6>
 80047e0:	08004cb3 	.word	0x08004cb3
 80047e4:	08004cc4 	.word	0x08004cc4

080047e8 <__ascii_wctomb>:
 80047e8:	b149      	cbz	r1, 80047fe <__ascii_wctomb+0x16>
 80047ea:	2aff      	cmp	r2, #255	; 0xff
 80047ec:	bf85      	ittet	hi
 80047ee:	238a      	movhi	r3, #138	; 0x8a
 80047f0:	6003      	strhi	r3, [r0, #0]
 80047f2:	700a      	strbls	r2, [r1, #0]
 80047f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80047f8:	bf98      	it	ls
 80047fa:	2001      	movls	r0, #1
 80047fc:	4770      	bx	lr
 80047fe:	4608      	mov	r0, r1
 8004800:	4770      	bx	lr

08004802 <memcpy>:
 8004802:	b510      	push	{r4, lr}
 8004804:	1e43      	subs	r3, r0, #1
 8004806:	440a      	add	r2, r1
 8004808:	4291      	cmp	r1, r2
 800480a:	d100      	bne.n	800480e <memcpy+0xc>
 800480c:	bd10      	pop	{r4, pc}
 800480e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004816:	e7f7      	b.n	8004808 <memcpy+0x6>

08004818 <memmove>:
 8004818:	4288      	cmp	r0, r1
 800481a:	b510      	push	{r4, lr}
 800481c:	eb01 0302 	add.w	r3, r1, r2
 8004820:	d807      	bhi.n	8004832 <memmove+0x1a>
 8004822:	1e42      	subs	r2, r0, #1
 8004824:	4299      	cmp	r1, r3
 8004826:	d00a      	beq.n	800483e <memmove+0x26>
 8004828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800482c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004830:	e7f8      	b.n	8004824 <memmove+0xc>
 8004832:	4283      	cmp	r3, r0
 8004834:	d9f5      	bls.n	8004822 <memmove+0xa>
 8004836:	1881      	adds	r1, r0, r2
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	42d3      	cmn	r3, r2
 800483c:	d100      	bne.n	8004840 <memmove+0x28>
 800483e:	bd10      	pop	{r4, pc}
 8004840:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004844:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004848:	e7f7      	b.n	800483a <memmove+0x22>
	...

0800484c <_free_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	d045      	beq.n	80048e0 <_free_r+0x94>
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	18e4      	addlt	r4, r4, r3
 8004860:	f000 f8d2 	bl	8004a08 <__malloc_lock>
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <_free_r+0x98>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	4610      	mov	r0, r2
 800486a:	b933      	cbnz	r3, 800487a <_free_r+0x2e>
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6014      	str	r4, [r2, #0]
 8004870:	4628      	mov	r0, r5
 8004872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004876:	f000 b8c8 	b.w	8004a0a <__malloc_unlock>
 800487a:	42a3      	cmp	r3, r4
 800487c:	d90c      	bls.n	8004898 <_free_r+0x4c>
 800487e:	6821      	ldr	r1, [r4, #0]
 8004880:	1862      	adds	r2, r4, r1
 8004882:	4293      	cmp	r3, r2
 8004884:	bf04      	itt	eq
 8004886:	681a      	ldreq	r2, [r3, #0]
 8004888:	685b      	ldreq	r3, [r3, #4]
 800488a:	6063      	str	r3, [r4, #4]
 800488c:	bf04      	itt	eq
 800488e:	1852      	addeq	r2, r2, r1
 8004890:	6022      	streq	r2, [r4, #0]
 8004892:	6004      	str	r4, [r0, #0]
 8004894:	e7ec      	b.n	8004870 <_free_r+0x24>
 8004896:	4613      	mov	r3, r2
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	b10a      	cbz	r2, 80048a0 <_free_r+0x54>
 800489c:	42a2      	cmp	r2, r4
 800489e:	d9fa      	bls.n	8004896 <_free_r+0x4a>
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	1858      	adds	r0, r3, r1
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d10b      	bne.n	80048c0 <_free_r+0x74>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	4401      	add	r1, r0
 80048ac:	1858      	adds	r0, r3, r1
 80048ae:	4282      	cmp	r2, r0
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	d1dd      	bne.n	8004870 <_free_r+0x24>
 80048b4:	6810      	ldr	r0, [r2, #0]
 80048b6:	6852      	ldr	r2, [r2, #4]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	4401      	add	r1, r0
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	e7d7      	b.n	8004870 <_free_r+0x24>
 80048c0:	d902      	bls.n	80048c8 <_free_r+0x7c>
 80048c2:	230c      	movs	r3, #12
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	e7d3      	b.n	8004870 <_free_r+0x24>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	1821      	adds	r1, r4, r0
 80048cc:	428a      	cmp	r2, r1
 80048ce:	bf04      	itt	eq
 80048d0:	6811      	ldreq	r1, [r2, #0]
 80048d2:	6852      	ldreq	r2, [r2, #4]
 80048d4:	6062      	str	r2, [r4, #4]
 80048d6:	bf04      	itt	eq
 80048d8:	1809      	addeq	r1, r1, r0
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	605c      	str	r4, [r3, #4]
 80048de:	e7c7      	b.n	8004870 <_free_r+0x24>
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	20000208 	.word	0x20000208

080048e8 <_malloc_r>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	1ccd      	adds	r5, r1, #3
 80048ec:	f025 0503 	bic.w	r5, r5, #3
 80048f0:	3508      	adds	r5, #8
 80048f2:	2d0c      	cmp	r5, #12
 80048f4:	bf38      	it	cc
 80048f6:	250c      	movcc	r5, #12
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	4606      	mov	r6, r0
 80048fc:	db01      	blt.n	8004902 <_malloc_r+0x1a>
 80048fe:	42a9      	cmp	r1, r5
 8004900:	d903      	bls.n	800490a <_malloc_r+0x22>
 8004902:	230c      	movs	r3, #12
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	2000      	movs	r0, #0
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	f000 f87d 	bl	8004a08 <__malloc_lock>
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <_malloc_r+0xac>)
 8004910:	6814      	ldr	r4, [r2, #0]
 8004912:	4621      	mov	r1, r4
 8004914:	b991      	cbnz	r1, 800493c <_malloc_r+0x54>
 8004916:	4c20      	ldr	r4, [pc, #128]	; (8004998 <_malloc_r+0xb0>)
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	b91b      	cbnz	r3, 8004924 <_malloc_r+0x3c>
 800491c:	4630      	mov	r0, r6
 800491e:	f000 f863 	bl	80049e8 <_sbrk_r>
 8004922:	6020      	str	r0, [r4, #0]
 8004924:	4629      	mov	r1, r5
 8004926:	4630      	mov	r0, r6
 8004928:	f000 f85e 	bl	80049e8 <_sbrk_r>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d124      	bne.n	800497a <_malloc_r+0x92>
 8004930:	230c      	movs	r3, #12
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	4630      	mov	r0, r6
 8004936:	f000 f868 	bl	8004a0a <__malloc_unlock>
 800493a:	e7e4      	b.n	8004906 <_malloc_r+0x1e>
 800493c:	680b      	ldr	r3, [r1, #0]
 800493e:	1b5b      	subs	r3, r3, r5
 8004940:	d418      	bmi.n	8004974 <_malloc_r+0x8c>
 8004942:	2b0b      	cmp	r3, #11
 8004944:	d90f      	bls.n	8004966 <_malloc_r+0x7e>
 8004946:	600b      	str	r3, [r1, #0]
 8004948:	50cd      	str	r5, [r1, r3]
 800494a:	18cc      	adds	r4, r1, r3
 800494c:	4630      	mov	r0, r6
 800494e:	f000 f85c 	bl	8004a0a <__malloc_unlock>
 8004952:	f104 000b 	add.w	r0, r4, #11
 8004956:	1d23      	adds	r3, r4, #4
 8004958:	f020 0007 	bic.w	r0, r0, #7
 800495c:	1ac3      	subs	r3, r0, r3
 800495e:	d0d3      	beq.n	8004908 <_malloc_r+0x20>
 8004960:	425a      	negs	r2, r3
 8004962:	50e2      	str	r2, [r4, r3]
 8004964:	e7d0      	b.n	8004908 <_malloc_r+0x20>
 8004966:	428c      	cmp	r4, r1
 8004968:	684b      	ldr	r3, [r1, #4]
 800496a:	bf16      	itet	ne
 800496c:	6063      	strne	r3, [r4, #4]
 800496e:	6013      	streq	r3, [r2, #0]
 8004970:	460c      	movne	r4, r1
 8004972:	e7eb      	b.n	800494c <_malloc_r+0x64>
 8004974:	460c      	mov	r4, r1
 8004976:	6849      	ldr	r1, [r1, #4]
 8004978:	e7cc      	b.n	8004914 <_malloc_r+0x2c>
 800497a:	1cc4      	adds	r4, r0, #3
 800497c:	f024 0403 	bic.w	r4, r4, #3
 8004980:	42a0      	cmp	r0, r4
 8004982:	d005      	beq.n	8004990 <_malloc_r+0xa8>
 8004984:	1a21      	subs	r1, r4, r0
 8004986:	4630      	mov	r0, r6
 8004988:	f000 f82e 	bl	80049e8 <_sbrk_r>
 800498c:	3001      	adds	r0, #1
 800498e:	d0cf      	beq.n	8004930 <_malloc_r+0x48>
 8004990:	6025      	str	r5, [r4, #0]
 8004992:	e7db      	b.n	800494c <_malloc_r+0x64>
 8004994:	20000208 	.word	0x20000208
 8004998:	2000020c 	.word	0x2000020c

0800499c <_realloc_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4607      	mov	r7, r0
 80049a0:	4614      	mov	r4, r2
 80049a2:	460e      	mov	r6, r1
 80049a4:	b921      	cbnz	r1, 80049b0 <_realloc_r+0x14>
 80049a6:	4611      	mov	r1, r2
 80049a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049ac:	f7ff bf9c 	b.w	80048e8 <_malloc_r>
 80049b0:	b922      	cbnz	r2, 80049bc <_realloc_r+0x20>
 80049b2:	f7ff ff4b 	bl	800484c <_free_r>
 80049b6:	4625      	mov	r5, r4
 80049b8:	4628      	mov	r0, r5
 80049ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049bc:	f000 f826 	bl	8004a0c <_malloc_usable_size_r>
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d20f      	bcs.n	80049e4 <_realloc_r+0x48>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff ff8e 	bl	80048e8 <_malloc_r>
 80049cc:	4605      	mov	r5, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d0f2      	beq.n	80049b8 <_realloc_r+0x1c>
 80049d2:	4631      	mov	r1, r6
 80049d4:	4622      	mov	r2, r4
 80049d6:	f7ff ff14 	bl	8004802 <memcpy>
 80049da:	4631      	mov	r1, r6
 80049dc:	4638      	mov	r0, r7
 80049de:	f7ff ff35 	bl	800484c <_free_r>
 80049e2:	e7e9      	b.n	80049b8 <_realloc_r+0x1c>
 80049e4:	4635      	mov	r5, r6
 80049e6:	e7e7      	b.n	80049b8 <_realloc_r+0x1c>

080049e8 <_sbrk_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4c06      	ldr	r4, [pc, #24]	; (8004a04 <_sbrk_r+0x1c>)
 80049ec:	2300      	movs	r3, #0
 80049ee:	4605      	mov	r5, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	f7fc f8fe 	bl	8000bf4 <_sbrk>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_sbrk_r+0x1a>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_sbrk_r+0x1a>
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	20000368 	.word	0x20000368

08004a08 <__malloc_lock>:
 8004a08:	4770      	bx	lr

08004a0a <__malloc_unlock>:
 8004a0a:	4770      	bx	lr

08004a0c <_malloc_usable_size_r>:
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f18      	subs	r0, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfbc      	itt	lt
 8004a16:	580b      	ldrlt	r3, [r1, r0]
 8004a18:	18c0      	addlt	r0, r0, r3
 8004a1a:	4770      	bx	lr

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
